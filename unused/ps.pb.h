// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ps.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ps_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ps_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ps_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ps_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ps_2eproto;
class IdProof;
class IdProofDefaultTypeInternal;
extern IdProofDefaultTypeInternal _IdProof_default_instance_;
class PSCredRequest;
class PSCredRequestDefaultTypeInternal;
extern PSCredRequestDefaultTypeInternal _PSCredRequest_default_instance_;
class PSCredential;
class PSCredentialDefaultTypeInternal;
extern PSCredentialDefaultTypeInternal _PSCredential_default_instance_;
class PSPubKey;
class PSPubKeyDefaultTypeInternal;
extern PSPubKeyDefaultTypeInternal _PSPubKey_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::IdProof* Arena::CreateMaybeMessage<::IdProof>(Arena*);
template<> ::PSCredRequest* Arena::CreateMaybeMessage<::PSCredRequest>(Arena*);
template<> ::PSCredential* Arena::CreateMaybeMessage<::PSCredential>(Arena*);
template<> ::PSPubKey* Arena::CreateMaybeMessage<::PSPubKey>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class PSPubKey :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PSPubKey) */ {
 public:
  PSPubKey();
  virtual ~PSPubKey();

  PSPubKey(const PSPubKey& from);
  PSPubKey(PSPubKey&& from) noexcept
    : PSPubKey() {
    *this = ::std::move(from);
  }

  inline PSPubKey& operator=(const PSPubKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline PSPubKey& operator=(PSPubKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PSPubKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PSPubKey* internal_default_instance() {
    return reinterpret_cast<const PSPubKey*>(
               &_PSPubKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PSPubKey& a, PSPubKey& b) {
    a.Swap(&b);
  }
  inline void Swap(PSPubKey* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PSPubKey* New() const final {
    return CreateMaybeMessage<PSPubKey>(nullptr);
  }

  PSPubKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PSPubKey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PSPubKey& from);
  void MergeFrom(const PSPubKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PSPubKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PSPubKey";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ps_2eproto);
    return ::descriptor_table_ps_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYiFieldNumber = 4,
    kYYiFieldNumber = 5,
    kGFieldNumber = 1,
    kGgFieldNumber = 2,
    kXXFieldNumber = 3,
  };
  // repeated bytes Yi = 4;
  int yi_size() const;
  void clear_yi();
  const std::string& yi(int index) const;
  std::string* mutable_yi(int index);
  void set_yi(int index, const std::string& value);
  void set_yi(int index, std::string&& value);
  void set_yi(int index, const char* value);
  void set_yi(int index, const void* value, size_t size);
  std::string* add_yi();
  void add_yi(const std::string& value);
  void add_yi(std::string&& value);
  void add_yi(const char* value);
  void add_yi(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& yi() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_yi();

  // repeated bytes YYi = 5;
  int yyi_size() const;
  void clear_yyi();
  const std::string& yyi(int index) const;
  std::string* mutable_yyi(int index);
  void set_yyi(int index, const std::string& value);
  void set_yyi(int index, std::string&& value);
  void set_yyi(int index, const char* value);
  void set_yyi(int index, const void* value, size_t size);
  std::string* add_yyi();
  void add_yyi(const std::string& value);
  void add_yyi(std::string&& value);
  void add_yyi(const char* value);
  void add_yyi(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& yyi() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_yyi();

  // bytes g = 1;
  void clear_g();
  const std::string& g() const;
  void set_g(const std::string& value);
  void set_g(std::string&& value);
  void set_g(const char* value);
  void set_g(const void* value, size_t size);
  std::string* mutable_g();
  std::string* release_g();
  void set_allocated_g(std::string* g);

  // bytes gg = 2;
  void clear_gg();
  const std::string& gg() const;
  void set_gg(const std::string& value);
  void set_gg(std::string&& value);
  void set_gg(const char* value);
  void set_gg(const void* value, size_t size);
  std::string* mutable_gg();
  std::string* release_gg();
  void set_allocated_gg(std::string* gg);

  // bytes XX = 3;
  void clear_xx();
  const std::string& xx() const;
  void set_xx(const std::string& value);
  void set_xx(std::string&& value);
  void set_xx(const char* value);
  void set_xx(const void* value, size_t size);
  std::string* mutable_xx();
  std::string* release_xx();
  void set_allocated_xx(std::string* xx);

  // @@protoc_insertion_point(class_scope:PSPubKey)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> yi_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> yyi_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr g_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ps_2eproto;
};
// -------------------------------------------------------------------

class PSCredRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PSCredRequest) */ {
 public:
  PSCredRequest();
  virtual ~PSCredRequest();

  PSCredRequest(const PSCredRequest& from);
  PSCredRequest(PSCredRequest&& from) noexcept
    : PSCredRequest() {
    *this = ::std::move(from);
  }

  inline PSCredRequest& operator=(const PSCredRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PSCredRequest& operator=(PSCredRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PSCredRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PSCredRequest* internal_default_instance() {
    return reinterpret_cast<const PSCredRequest*>(
               &_PSCredRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PSCredRequest& a, PSCredRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PSCredRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PSCredRequest* New() const final {
    return CreateMaybeMessage<PSCredRequest>(nullptr);
  }

  PSCredRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PSCredRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PSCredRequest& from);
  void MergeFrom(const PSCredRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PSCredRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PSCredRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ps_2eproto);
    return ::descriptor_table_ps_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRsFieldNumber = 3,
    kAttributesFieldNumber = 4,
    kAFieldNumber = 1,
    kCFieldNumber = 2,
  };
  // repeated bytes rs = 3;
  int rs_size() const;
  void clear_rs();
  const std::string& rs(int index) const;
  std::string* mutable_rs(int index);
  void set_rs(int index, const std::string& value);
  void set_rs(int index, std::string&& value);
  void set_rs(int index, const char* value);
  void set_rs(int index, const void* value, size_t size);
  std::string* add_rs();
  void add_rs(const std::string& value);
  void add_rs(std::string&& value);
  void add_rs(const char* value);
  void add_rs(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& rs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_rs();

  // repeated string attributes = 4;
  int attributes_size() const;
  void clear_attributes();
  const std::string& attributes(int index) const;
  std::string* mutable_attributes(int index);
  void set_attributes(int index, const std::string& value);
  void set_attributes(int index, std::string&& value);
  void set_attributes(int index, const char* value);
  void set_attributes(int index, const char* value, size_t size);
  std::string* add_attributes();
  void add_attributes(const std::string& value);
  void add_attributes(std::string&& value);
  void add_attributes(const char* value);
  void add_attributes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& attributes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_attributes();

  // bytes A = 1;
  void clear_a();
  const std::string& a() const;
  void set_a(const std::string& value);
  void set_a(std::string&& value);
  void set_a(const char* value);
  void set_a(const void* value, size_t size);
  std::string* mutable_a();
  std::string* release_a();
  void set_allocated_a(std::string* a);

  // bytes c = 2;
  void clear_c();
  const std::string& c() const;
  void set_c(const std::string& value);
  void set_c(std::string&& value);
  void set_c(const char* value);
  void set_c(const void* value, size_t size);
  std::string* mutable_c();
  std::string* release_c();
  void set_allocated_c(std::string* c);

  // @@protoc_insertion_point(class_scope:PSCredRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> rs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> attributes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr a_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr c_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ps_2eproto;
};
// -------------------------------------------------------------------

class PSCredential :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PSCredential) */ {
 public:
  PSCredential();
  virtual ~PSCredential();

  PSCredential(const PSCredential& from);
  PSCredential(PSCredential&& from) noexcept
    : PSCredential() {
    *this = ::std::move(from);
  }

  inline PSCredential& operator=(const PSCredential& from) {
    CopyFrom(from);
    return *this;
  }
  inline PSCredential& operator=(PSCredential&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PSCredential& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PSCredential* internal_default_instance() {
    return reinterpret_cast<const PSCredential*>(
               &_PSCredential_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PSCredential& a, PSCredential& b) {
    a.Swap(&b);
  }
  inline void Swap(PSCredential* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PSCredential* New() const final {
    return CreateMaybeMessage<PSCredential>(nullptr);
  }

  PSCredential* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PSCredential>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PSCredential& from);
  void MergeFrom(const PSCredential& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PSCredential* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PSCredential";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ps_2eproto);
    return ::descriptor_table_ps_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSig1FieldNumber = 1,
    kSig2FieldNumber = 2,
  };
  // bytes sig1 = 1;
  void clear_sig1();
  const std::string& sig1() const;
  void set_sig1(const std::string& value);
  void set_sig1(std::string&& value);
  void set_sig1(const char* value);
  void set_sig1(const void* value, size_t size);
  std::string* mutable_sig1();
  std::string* release_sig1();
  void set_allocated_sig1(std::string* sig1);

  // bytes sig2 = 2;
  void clear_sig2();
  const std::string& sig2() const;
  void set_sig2(const std::string& value);
  void set_sig2(std::string&& value);
  void set_sig2(const char* value);
  void set_sig2(const void* value, size_t size);
  std::string* mutable_sig2();
  std::string* release_sig2();
  void set_allocated_sig2(std::string* sig2);

  // @@protoc_insertion_point(class_scope:PSCredential)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sig1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sig2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ps_2eproto;
};
// -------------------------------------------------------------------

class IdProof :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IdProof) */ {
 public:
  IdProof();
  virtual ~IdProof();

  IdProof(const IdProof& from);
  IdProof(IdProof&& from) noexcept
    : IdProof() {
    *this = ::std::move(from);
  }

  inline IdProof& operator=(const IdProof& from) {
    CopyFrom(from);
    return *this;
  }
  inline IdProof& operator=(IdProof&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IdProof& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IdProof* internal_default_instance() {
    return reinterpret_cast<const IdProof*>(
               &_IdProof_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(IdProof& a, IdProof& b) {
    a.Swap(&b);
  }
  inline void Swap(IdProof* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IdProof* New() const final {
    return CreateMaybeMessage<IdProof>(nullptr);
  }

  IdProof* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IdProof>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IdProof& from);
  void MergeFrom(const IdProof& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IdProof* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IdProof";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ps_2eproto);
    return ::descriptor_table_ps_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRsFieldNumber = 8,
    kAttributesFieldNumber = 9,
    kSig1FieldNumber = 1,
    kSig2FieldNumber = 2,
    kKFieldNumber = 3,
    kPhiFieldNumber = 4,
    kE1FieldNumber = 5,
    kE2FieldNumber = 6,
    kCFieldNumber = 7,
  };
  // repeated bytes rs = 8;
  int rs_size() const;
  void clear_rs();
  const std::string& rs(int index) const;
  std::string* mutable_rs(int index);
  void set_rs(int index, const std::string& value);
  void set_rs(int index, std::string&& value);
  void set_rs(int index, const char* value);
  void set_rs(int index, const void* value, size_t size);
  std::string* add_rs();
  void add_rs(const std::string& value);
  void add_rs(std::string&& value);
  void add_rs(const char* value);
  void add_rs(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& rs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_rs();

  // repeated string attributes = 9;
  int attributes_size() const;
  void clear_attributes();
  const std::string& attributes(int index) const;
  std::string* mutable_attributes(int index);
  void set_attributes(int index, const std::string& value);
  void set_attributes(int index, std::string&& value);
  void set_attributes(int index, const char* value);
  void set_attributes(int index, const char* value, size_t size);
  std::string* add_attributes();
  void add_attributes(const std::string& value);
  void add_attributes(std::string&& value);
  void add_attributes(const char* value);
  void add_attributes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& attributes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_attributes();

  // bytes sig1 = 1;
  void clear_sig1();
  const std::string& sig1() const;
  void set_sig1(const std::string& value);
  void set_sig1(std::string&& value);
  void set_sig1(const char* value);
  void set_sig1(const void* value, size_t size);
  std::string* mutable_sig1();
  std::string* release_sig1();
  void set_allocated_sig1(std::string* sig1);

  // bytes sig2 = 2;
  void clear_sig2();
  const std::string& sig2() const;
  void set_sig2(const std::string& value);
  void set_sig2(std::string&& value);
  void set_sig2(const char* value);
  void set_sig2(const void* value, size_t size);
  std::string* mutable_sig2();
  std::string* release_sig2();
  void set_allocated_sig2(std::string* sig2);

  // bytes k = 3;
  void clear_k();
  const std::string& k() const;
  void set_k(const std::string& value);
  void set_k(std::string&& value);
  void set_k(const char* value);
  void set_k(const void* value, size_t size);
  std::string* mutable_k();
  std::string* release_k();
  void set_allocated_k(std::string* k);

  // bytes phi = 4;
  void clear_phi();
  const std::string& phi() const;
  void set_phi(const std::string& value);
  void set_phi(std::string&& value);
  void set_phi(const char* value);
  void set_phi(const void* value, size_t size);
  std::string* mutable_phi();
  std::string* release_phi();
  void set_allocated_phi(std::string* phi);

  // bytes E1 = 5;
  void clear_e1();
  const std::string& e1() const;
  void set_e1(const std::string& value);
  void set_e1(std::string&& value);
  void set_e1(const char* value);
  void set_e1(const void* value, size_t size);
  std::string* mutable_e1();
  std::string* release_e1();
  void set_allocated_e1(std::string* e1);

  // bytes E2 = 6;
  void clear_e2();
  const std::string& e2() const;
  void set_e2(const std::string& value);
  void set_e2(std::string&& value);
  void set_e2(const char* value);
  void set_e2(const void* value, size_t size);
  std::string* mutable_e2();
  std::string* release_e2();
  void set_allocated_e2(std::string* e2);

  // bytes c = 7;
  void clear_c();
  const std::string& c() const;
  void set_c(const std::string& value);
  void set_c(std::string&& value);
  void set_c(const char* value);
  void set_c(const void* value, size_t size);
  std::string* mutable_c();
  std::string* release_c();
  void set_allocated_c(std::string* c);

  // @@protoc_insertion_point(class_scope:IdProof)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> rs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> attributes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sig1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sig2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr k_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phi_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr e1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr e2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr c_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ps_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PSPubKey

// bytes g = 1;
inline void PSPubKey::clear_g() {
  g_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PSPubKey::g() const {
  // @@protoc_insertion_point(field_get:PSPubKey.g)
  return g_.GetNoArena();
}
inline void PSPubKey::set_g(const std::string& value) {
  
  g_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PSPubKey.g)
}
inline void PSPubKey::set_g(std::string&& value) {
  
  g_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PSPubKey.g)
}
inline void PSPubKey::set_g(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  g_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PSPubKey.g)
}
inline void PSPubKey::set_g(const void* value, size_t size) {
  
  g_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PSPubKey.g)
}
inline std::string* PSPubKey::mutable_g() {
  
  // @@protoc_insertion_point(field_mutable:PSPubKey.g)
  return g_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PSPubKey::release_g() {
  // @@protoc_insertion_point(field_release:PSPubKey.g)
  
  return g_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PSPubKey::set_allocated_g(std::string* g) {
  if (g != nullptr) {
    
  } else {
    
  }
  g_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), g);
  // @@protoc_insertion_point(field_set_allocated:PSPubKey.g)
}

// bytes gg = 2;
inline void PSPubKey::clear_gg() {
  gg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PSPubKey::gg() const {
  // @@protoc_insertion_point(field_get:PSPubKey.gg)
  return gg_.GetNoArena();
}
inline void PSPubKey::set_gg(const std::string& value) {
  
  gg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PSPubKey.gg)
}
inline void PSPubKey::set_gg(std::string&& value) {
  
  gg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PSPubKey.gg)
}
inline void PSPubKey::set_gg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PSPubKey.gg)
}
inline void PSPubKey::set_gg(const void* value, size_t size) {
  
  gg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PSPubKey.gg)
}
inline std::string* PSPubKey::mutable_gg() {
  
  // @@protoc_insertion_point(field_mutable:PSPubKey.gg)
  return gg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PSPubKey::release_gg() {
  // @@protoc_insertion_point(field_release:PSPubKey.gg)
  
  return gg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PSPubKey::set_allocated_gg(std::string* gg) {
  if (gg != nullptr) {
    
  } else {
    
  }
  gg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gg);
  // @@protoc_insertion_point(field_set_allocated:PSPubKey.gg)
}

// bytes XX = 3;
inline void PSPubKey::clear_xx() {
  xx_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PSPubKey::xx() const {
  // @@protoc_insertion_point(field_get:PSPubKey.XX)
  return xx_.GetNoArena();
}
inline void PSPubKey::set_xx(const std::string& value) {
  
  xx_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PSPubKey.XX)
}
inline void PSPubKey::set_xx(std::string&& value) {
  
  xx_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PSPubKey.XX)
}
inline void PSPubKey::set_xx(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  xx_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PSPubKey.XX)
}
inline void PSPubKey::set_xx(const void* value, size_t size) {
  
  xx_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PSPubKey.XX)
}
inline std::string* PSPubKey::mutable_xx() {
  
  // @@protoc_insertion_point(field_mutable:PSPubKey.XX)
  return xx_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PSPubKey::release_xx() {
  // @@protoc_insertion_point(field_release:PSPubKey.XX)
  
  return xx_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PSPubKey::set_allocated_xx(std::string* xx) {
  if (xx != nullptr) {
    
  } else {
    
  }
  xx_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xx);
  // @@protoc_insertion_point(field_set_allocated:PSPubKey.XX)
}

// repeated bytes Yi = 4;
inline int PSPubKey::yi_size() const {
  return yi_.size();
}
inline void PSPubKey::clear_yi() {
  yi_.Clear();
}
inline const std::string& PSPubKey::yi(int index) const {
  // @@protoc_insertion_point(field_get:PSPubKey.Yi)
  return yi_.Get(index);
}
inline std::string* PSPubKey::mutable_yi(int index) {
  // @@protoc_insertion_point(field_mutable:PSPubKey.Yi)
  return yi_.Mutable(index);
}
inline void PSPubKey::set_yi(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:PSPubKey.Yi)
  yi_.Mutable(index)->assign(value);
}
inline void PSPubKey::set_yi(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:PSPubKey.Yi)
  yi_.Mutable(index)->assign(std::move(value));
}
inline void PSPubKey::set_yi(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  yi_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PSPubKey.Yi)
}
inline void PSPubKey::set_yi(int index, const void* value, size_t size) {
  yi_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PSPubKey.Yi)
}
inline std::string* PSPubKey::add_yi() {
  // @@protoc_insertion_point(field_add_mutable:PSPubKey.Yi)
  return yi_.Add();
}
inline void PSPubKey::add_yi(const std::string& value) {
  yi_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PSPubKey.Yi)
}
inline void PSPubKey::add_yi(std::string&& value) {
  yi_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:PSPubKey.Yi)
}
inline void PSPubKey::add_yi(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  yi_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PSPubKey.Yi)
}
inline void PSPubKey::add_yi(const void* value, size_t size) {
  yi_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PSPubKey.Yi)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PSPubKey::yi() const {
  // @@protoc_insertion_point(field_list:PSPubKey.Yi)
  return yi_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PSPubKey::mutable_yi() {
  // @@protoc_insertion_point(field_mutable_list:PSPubKey.Yi)
  return &yi_;
}

// repeated bytes YYi = 5;
inline int PSPubKey::yyi_size() const {
  return yyi_.size();
}
inline void PSPubKey::clear_yyi() {
  yyi_.Clear();
}
inline const std::string& PSPubKey::yyi(int index) const {
  // @@protoc_insertion_point(field_get:PSPubKey.YYi)
  return yyi_.Get(index);
}
inline std::string* PSPubKey::mutable_yyi(int index) {
  // @@protoc_insertion_point(field_mutable:PSPubKey.YYi)
  return yyi_.Mutable(index);
}
inline void PSPubKey::set_yyi(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:PSPubKey.YYi)
  yyi_.Mutable(index)->assign(value);
}
inline void PSPubKey::set_yyi(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:PSPubKey.YYi)
  yyi_.Mutable(index)->assign(std::move(value));
}
inline void PSPubKey::set_yyi(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  yyi_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PSPubKey.YYi)
}
inline void PSPubKey::set_yyi(int index, const void* value, size_t size) {
  yyi_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PSPubKey.YYi)
}
inline std::string* PSPubKey::add_yyi() {
  // @@protoc_insertion_point(field_add_mutable:PSPubKey.YYi)
  return yyi_.Add();
}
inline void PSPubKey::add_yyi(const std::string& value) {
  yyi_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PSPubKey.YYi)
}
inline void PSPubKey::add_yyi(std::string&& value) {
  yyi_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:PSPubKey.YYi)
}
inline void PSPubKey::add_yyi(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  yyi_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PSPubKey.YYi)
}
inline void PSPubKey::add_yyi(const void* value, size_t size) {
  yyi_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PSPubKey.YYi)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PSPubKey::yyi() const {
  // @@protoc_insertion_point(field_list:PSPubKey.YYi)
  return yyi_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PSPubKey::mutable_yyi() {
  // @@protoc_insertion_point(field_mutable_list:PSPubKey.YYi)
  return &yyi_;
}

// -------------------------------------------------------------------

// PSCredRequest

// bytes A = 1;
inline void PSCredRequest::clear_a() {
  a_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PSCredRequest::a() const {
  // @@protoc_insertion_point(field_get:PSCredRequest.A)
  return a_.GetNoArena();
}
inline void PSCredRequest::set_a(const std::string& value) {
  
  a_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PSCredRequest.A)
}
inline void PSCredRequest::set_a(std::string&& value) {
  
  a_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PSCredRequest.A)
}
inline void PSCredRequest::set_a(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  a_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PSCredRequest.A)
}
inline void PSCredRequest::set_a(const void* value, size_t size) {
  
  a_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PSCredRequest.A)
}
inline std::string* PSCredRequest::mutable_a() {
  
  // @@protoc_insertion_point(field_mutable:PSCredRequest.A)
  return a_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PSCredRequest::release_a() {
  // @@protoc_insertion_point(field_release:PSCredRequest.A)
  
  return a_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PSCredRequest::set_allocated_a(std::string* a) {
  if (a != nullptr) {
    
  } else {
    
  }
  a_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), a);
  // @@protoc_insertion_point(field_set_allocated:PSCredRequest.A)
}

// bytes c = 2;
inline void PSCredRequest::clear_c() {
  c_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PSCredRequest::c() const {
  // @@protoc_insertion_point(field_get:PSCredRequest.c)
  return c_.GetNoArena();
}
inline void PSCredRequest::set_c(const std::string& value) {
  
  c_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PSCredRequest.c)
}
inline void PSCredRequest::set_c(std::string&& value) {
  
  c_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PSCredRequest.c)
}
inline void PSCredRequest::set_c(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  c_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PSCredRequest.c)
}
inline void PSCredRequest::set_c(const void* value, size_t size) {
  
  c_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PSCredRequest.c)
}
inline std::string* PSCredRequest::mutable_c() {
  
  // @@protoc_insertion_point(field_mutable:PSCredRequest.c)
  return c_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PSCredRequest::release_c() {
  // @@protoc_insertion_point(field_release:PSCredRequest.c)
  
  return c_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PSCredRequest::set_allocated_c(std::string* c) {
  if (c != nullptr) {
    
  } else {
    
  }
  c_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), c);
  // @@protoc_insertion_point(field_set_allocated:PSCredRequest.c)
}

// repeated bytes rs = 3;
inline int PSCredRequest::rs_size() const {
  return rs_.size();
}
inline void PSCredRequest::clear_rs() {
  rs_.Clear();
}
inline const std::string& PSCredRequest::rs(int index) const {
  // @@protoc_insertion_point(field_get:PSCredRequest.rs)
  return rs_.Get(index);
}
inline std::string* PSCredRequest::mutable_rs(int index) {
  // @@protoc_insertion_point(field_mutable:PSCredRequest.rs)
  return rs_.Mutable(index);
}
inline void PSCredRequest::set_rs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:PSCredRequest.rs)
  rs_.Mutable(index)->assign(value);
}
inline void PSCredRequest::set_rs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:PSCredRequest.rs)
  rs_.Mutable(index)->assign(std::move(value));
}
inline void PSCredRequest::set_rs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  rs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PSCredRequest.rs)
}
inline void PSCredRequest::set_rs(int index, const void* value, size_t size) {
  rs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PSCredRequest.rs)
}
inline std::string* PSCredRequest::add_rs() {
  // @@protoc_insertion_point(field_add_mutable:PSCredRequest.rs)
  return rs_.Add();
}
inline void PSCredRequest::add_rs(const std::string& value) {
  rs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PSCredRequest.rs)
}
inline void PSCredRequest::add_rs(std::string&& value) {
  rs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:PSCredRequest.rs)
}
inline void PSCredRequest::add_rs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  rs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PSCredRequest.rs)
}
inline void PSCredRequest::add_rs(const void* value, size_t size) {
  rs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PSCredRequest.rs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PSCredRequest::rs() const {
  // @@protoc_insertion_point(field_list:PSCredRequest.rs)
  return rs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PSCredRequest::mutable_rs() {
  // @@protoc_insertion_point(field_mutable_list:PSCredRequest.rs)
  return &rs_;
}

// repeated string attributes = 4;
inline int PSCredRequest::attributes_size() const {
  return attributes_.size();
}
inline void PSCredRequest::clear_attributes() {
  attributes_.Clear();
}
inline const std::string& PSCredRequest::attributes(int index) const {
  // @@protoc_insertion_point(field_get:PSCredRequest.attributes)
  return attributes_.Get(index);
}
inline std::string* PSCredRequest::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:PSCredRequest.attributes)
  return attributes_.Mutable(index);
}
inline void PSCredRequest::set_attributes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:PSCredRequest.attributes)
  attributes_.Mutable(index)->assign(value);
}
inline void PSCredRequest::set_attributes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:PSCredRequest.attributes)
  attributes_.Mutable(index)->assign(std::move(value));
}
inline void PSCredRequest::set_attributes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  attributes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PSCredRequest.attributes)
}
inline void PSCredRequest::set_attributes(int index, const char* value, size_t size) {
  attributes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PSCredRequest.attributes)
}
inline std::string* PSCredRequest::add_attributes() {
  // @@protoc_insertion_point(field_add_mutable:PSCredRequest.attributes)
  return attributes_.Add();
}
inline void PSCredRequest::add_attributes(const std::string& value) {
  attributes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PSCredRequest.attributes)
}
inline void PSCredRequest::add_attributes(std::string&& value) {
  attributes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:PSCredRequest.attributes)
}
inline void PSCredRequest::add_attributes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  attributes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PSCredRequest.attributes)
}
inline void PSCredRequest::add_attributes(const char* value, size_t size) {
  attributes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PSCredRequest.attributes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PSCredRequest::attributes() const {
  // @@protoc_insertion_point(field_list:PSCredRequest.attributes)
  return attributes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PSCredRequest::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:PSCredRequest.attributes)
  return &attributes_;
}

// -------------------------------------------------------------------

// PSCredential

// bytes sig1 = 1;
inline void PSCredential::clear_sig1() {
  sig1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PSCredential::sig1() const {
  // @@protoc_insertion_point(field_get:PSCredential.sig1)
  return sig1_.GetNoArena();
}
inline void PSCredential::set_sig1(const std::string& value) {
  
  sig1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PSCredential.sig1)
}
inline void PSCredential::set_sig1(std::string&& value) {
  
  sig1_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PSCredential.sig1)
}
inline void PSCredential::set_sig1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sig1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PSCredential.sig1)
}
inline void PSCredential::set_sig1(const void* value, size_t size) {
  
  sig1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PSCredential.sig1)
}
inline std::string* PSCredential::mutable_sig1() {
  
  // @@protoc_insertion_point(field_mutable:PSCredential.sig1)
  return sig1_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PSCredential::release_sig1() {
  // @@protoc_insertion_point(field_release:PSCredential.sig1)
  
  return sig1_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PSCredential::set_allocated_sig1(std::string* sig1) {
  if (sig1 != nullptr) {
    
  } else {
    
  }
  sig1_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sig1);
  // @@protoc_insertion_point(field_set_allocated:PSCredential.sig1)
}

// bytes sig2 = 2;
inline void PSCredential::clear_sig2() {
  sig2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PSCredential::sig2() const {
  // @@protoc_insertion_point(field_get:PSCredential.sig2)
  return sig2_.GetNoArena();
}
inline void PSCredential::set_sig2(const std::string& value) {
  
  sig2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PSCredential.sig2)
}
inline void PSCredential::set_sig2(std::string&& value) {
  
  sig2_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PSCredential.sig2)
}
inline void PSCredential::set_sig2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sig2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PSCredential.sig2)
}
inline void PSCredential::set_sig2(const void* value, size_t size) {
  
  sig2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PSCredential.sig2)
}
inline std::string* PSCredential::mutable_sig2() {
  
  // @@protoc_insertion_point(field_mutable:PSCredential.sig2)
  return sig2_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PSCredential::release_sig2() {
  // @@protoc_insertion_point(field_release:PSCredential.sig2)
  
  return sig2_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PSCredential::set_allocated_sig2(std::string* sig2) {
  if (sig2 != nullptr) {
    
  } else {
    
  }
  sig2_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sig2);
  // @@protoc_insertion_point(field_set_allocated:PSCredential.sig2)
}

// -------------------------------------------------------------------

// IdProof

// bytes sig1 = 1;
inline void IdProof::clear_sig1() {
  sig1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IdProof::sig1() const {
  // @@protoc_insertion_point(field_get:IdProof.sig1)
  return sig1_.GetNoArena();
}
inline void IdProof::set_sig1(const std::string& value) {
  
  sig1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IdProof.sig1)
}
inline void IdProof::set_sig1(std::string&& value) {
  
  sig1_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IdProof.sig1)
}
inline void IdProof::set_sig1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sig1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IdProof.sig1)
}
inline void IdProof::set_sig1(const void* value, size_t size) {
  
  sig1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IdProof.sig1)
}
inline std::string* IdProof::mutable_sig1() {
  
  // @@protoc_insertion_point(field_mutable:IdProof.sig1)
  return sig1_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IdProof::release_sig1() {
  // @@protoc_insertion_point(field_release:IdProof.sig1)
  
  return sig1_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IdProof::set_allocated_sig1(std::string* sig1) {
  if (sig1 != nullptr) {
    
  } else {
    
  }
  sig1_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sig1);
  // @@protoc_insertion_point(field_set_allocated:IdProof.sig1)
}

// bytes sig2 = 2;
inline void IdProof::clear_sig2() {
  sig2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IdProof::sig2() const {
  // @@protoc_insertion_point(field_get:IdProof.sig2)
  return sig2_.GetNoArena();
}
inline void IdProof::set_sig2(const std::string& value) {
  
  sig2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IdProof.sig2)
}
inline void IdProof::set_sig2(std::string&& value) {
  
  sig2_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IdProof.sig2)
}
inline void IdProof::set_sig2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sig2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IdProof.sig2)
}
inline void IdProof::set_sig2(const void* value, size_t size) {
  
  sig2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IdProof.sig2)
}
inline std::string* IdProof::mutable_sig2() {
  
  // @@protoc_insertion_point(field_mutable:IdProof.sig2)
  return sig2_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IdProof::release_sig2() {
  // @@protoc_insertion_point(field_release:IdProof.sig2)
  
  return sig2_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IdProof::set_allocated_sig2(std::string* sig2) {
  if (sig2 != nullptr) {
    
  } else {
    
  }
  sig2_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sig2);
  // @@protoc_insertion_point(field_set_allocated:IdProof.sig2)
}

// bytes k = 3;
inline void IdProof::clear_k() {
  k_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IdProof::k() const {
  // @@protoc_insertion_point(field_get:IdProof.k)
  return k_.GetNoArena();
}
inline void IdProof::set_k(const std::string& value) {
  
  k_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IdProof.k)
}
inline void IdProof::set_k(std::string&& value) {
  
  k_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IdProof.k)
}
inline void IdProof::set_k(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  k_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IdProof.k)
}
inline void IdProof::set_k(const void* value, size_t size) {
  
  k_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IdProof.k)
}
inline std::string* IdProof::mutable_k() {
  
  // @@protoc_insertion_point(field_mutable:IdProof.k)
  return k_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IdProof::release_k() {
  // @@protoc_insertion_point(field_release:IdProof.k)
  
  return k_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IdProof::set_allocated_k(std::string* k) {
  if (k != nullptr) {
    
  } else {
    
  }
  k_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), k);
  // @@protoc_insertion_point(field_set_allocated:IdProof.k)
}

// bytes phi = 4;
inline void IdProof::clear_phi() {
  phi_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IdProof::phi() const {
  // @@protoc_insertion_point(field_get:IdProof.phi)
  return phi_.GetNoArena();
}
inline void IdProof::set_phi(const std::string& value) {
  
  phi_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IdProof.phi)
}
inline void IdProof::set_phi(std::string&& value) {
  
  phi_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IdProof.phi)
}
inline void IdProof::set_phi(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phi_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IdProof.phi)
}
inline void IdProof::set_phi(const void* value, size_t size) {
  
  phi_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IdProof.phi)
}
inline std::string* IdProof::mutable_phi() {
  
  // @@protoc_insertion_point(field_mutable:IdProof.phi)
  return phi_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IdProof::release_phi() {
  // @@protoc_insertion_point(field_release:IdProof.phi)
  
  return phi_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IdProof::set_allocated_phi(std::string* phi) {
  if (phi != nullptr) {
    
  } else {
    
  }
  phi_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phi);
  // @@protoc_insertion_point(field_set_allocated:IdProof.phi)
}

// bytes E1 = 5;
inline void IdProof::clear_e1() {
  e1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IdProof::e1() const {
  // @@protoc_insertion_point(field_get:IdProof.E1)
  return e1_.GetNoArena();
}
inline void IdProof::set_e1(const std::string& value) {
  
  e1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IdProof.E1)
}
inline void IdProof::set_e1(std::string&& value) {
  
  e1_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IdProof.E1)
}
inline void IdProof::set_e1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  e1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IdProof.E1)
}
inline void IdProof::set_e1(const void* value, size_t size) {
  
  e1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IdProof.E1)
}
inline std::string* IdProof::mutable_e1() {
  
  // @@protoc_insertion_point(field_mutable:IdProof.E1)
  return e1_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IdProof::release_e1() {
  // @@protoc_insertion_point(field_release:IdProof.E1)
  
  return e1_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IdProof::set_allocated_e1(std::string* e1) {
  if (e1 != nullptr) {
    
  } else {
    
  }
  e1_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), e1);
  // @@protoc_insertion_point(field_set_allocated:IdProof.E1)
}

// bytes E2 = 6;
inline void IdProof::clear_e2() {
  e2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IdProof::e2() const {
  // @@protoc_insertion_point(field_get:IdProof.E2)
  return e2_.GetNoArena();
}
inline void IdProof::set_e2(const std::string& value) {
  
  e2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IdProof.E2)
}
inline void IdProof::set_e2(std::string&& value) {
  
  e2_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IdProof.E2)
}
inline void IdProof::set_e2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  e2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IdProof.E2)
}
inline void IdProof::set_e2(const void* value, size_t size) {
  
  e2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IdProof.E2)
}
inline std::string* IdProof::mutable_e2() {
  
  // @@protoc_insertion_point(field_mutable:IdProof.E2)
  return e2_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IdProof::release_e2() {
  // @@protoc_insertion_point(field_release:IdProof.E2)
  
  return e2_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IdProof::set_allocated_e2(std::string* e2) {
  if (e2 != nullptr) {
    
  } else {
    
  }
  e2_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), e2);
  // @@protoc_insertion_point(field_set_allocated:IdProof.E2)
}

// bytes c = 7;
inline void IdProof::clear_c() {
  c_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IdProof::c() const {
  // @@protoc_insertion_point(field_get:IdProof.c)
  return c_.GetNoArena();
}
inline void IdProof::set_c(const std::string& value) {
  
  c_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IdProof.c)
}
inline void IdProof::set_c(std::string&& value) {
  
  c_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IdProof.c)
}
inline void IdProof::set_c(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  c_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IdProof.c)
}
inline void IdProof::set_c(const void* value, size_t size) {
  
  c_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IdProof.c)
}
inline std::string* IdProof::mutable_c() {
  
  // @@protoc_insertion_point(field_mutable:IdProof.c)
  return c_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IdProof::release_c() {
  // @@protoc_insertion_point(field_release:IdProof.c)
  
  return c_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IdProof::set_allocated_c(std::string* c) {
  if (c != nullptr) {
    
  } else {
    
  }
  c_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), c);
  // @@protoc_insertion_point(field_set_allocated:IdProof.c)
}

// repeated bytes rs = 8;
inline int IdProof::rs_size() const {
  return rs_.size();
}
inline void IdProof::clear_rs() {
  rs_.Clear();
}
inline const std::string& IdProof::rs(int index) const {
  // @@protoc_insertion_point(field_get:IdProof.rs)
  return rs_.Get(index);
}
inline std::string* IdProof::mutable_rs(int index) {
  // @@protoc_insertion_point(field_mutable:IdProof.rs)
  return rs_.Mutable(index);
}
inline void IdProof::set_rs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:IdProof.rs)
  rs_.Mutable(index)->assign(value);
}
inline void IdProof::set_rs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:IdProof.rs)
  rs_.Mutable(index)->assign(std::move(value));
}
inline void IdProof::set_rs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  rs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IdProof.rs)
}
inline void IdProof::set_rs(int index, const void* value, size_t size) {
  rs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IdProof.rs)
}
inline std::string* IdProof::add_rs() {
  // @@protoc_insertion_point(field_add_mutable:IdProof.rs)
  return rs_.Add();
}
inline void IdProof::add_rs(const std::string& value) {
  rs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:IdProof.rs)
}
inline void IdProof::add_rs(std::string&& value) {
  rs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:IdProof.rs)
}
inline void IdProof::add_rs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  rs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IdProof.rs)
}
inline void IdProof::add_rs(const void* value, size_t size) {
  rs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IdProof.rs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
IdProof::rs() const {
  // @@protoc_insertion_point(field_list:IdProof.rs)
  return rs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
IdProof::mutable_rs() {
  // @@protoc_insertion_point(field_mutable_list:IdProof.rs)
  return &rs_;
}

// repeated string attributes = 9;
inline int IdProof::attributes_size() const {
  return attributes_.size();
}
inline void IdProof::clear_attributes() {
  attributes_.Clear();
}
inline const std::string& IdProof::attributes(int index) const {
  // @@protoc_insertion_point(field_get:IdProof.attributes)
  return attributes_.Get(index);
}
inline std::string* IdProof::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:IdProof.attributes)
  return attributes_.Mutable(index);
}
inline void IdProof::set_attributes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:IdProof.attributes)
  attributes_.Mutable(index)->assign(value);
}
inline void IdProof::set_attributes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:IdProof.attributes)
  attributes_.Mutable(index)->assign(std::move(value));
}
inline void IdProof::set_attributes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  attributes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IdProof.attributes)
}
inline void IdProof::set_attributes(int index, const char* value, size_t size) {
  attributes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IdProof.attributes)
}
inline std::string* IdProof::add_attributes() {
  // @@protoc_insertion_point(field_add_mutable:IdProof.attributes)
  return attributes_.Add();
}
inline void IdProof::add_attributes(const std::string& value) {
  attributes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:IdProof.attributes)
}
inline void IdProof::add_attributes(std::string&& value) {
  attributes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:IdProof.attributes)
}
inline void IdProof::add_attributes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  attributes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IdProof.attributes)
}
inline void IdProof::add_attributes(const char* value, size_t size) {
  attributes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IdProof.attributes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
IdProof::attributes() const {
  // @@protoc_insertion_point(field_list:IdProof.attributes)
  return attributes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
IdProof::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:IdProof.attributes)
  return &attributes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ps_2eproto
