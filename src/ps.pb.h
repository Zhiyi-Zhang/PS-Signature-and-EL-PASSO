// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ps.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ps_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ps_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ps_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ps_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ps_2eproto;
class PSCredProof;
class PSCredProofDefaultTypeInternal;
extern PSCredProofDefaultTypeInternal _PSCredProof_default_instance_;
class PSCredRequest;
class PSCredRequestDefaultTypeInternal;
extern PSCredRequestDefaultTypeInternal _PSCredRequest_default_instance_;
class PSCredential;
class PSCredentialDefaultTypeInternal;
extern PSCredentialDefaultTypeInternal _PSCredential_default_instance_;
class PSPubKey;
class PSPubKeyDefaultTypeInternal;
extern PSPubKeyDefaultTypeInternal _PSPubKey_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::PSCredProof* Arena::CreateMaybeMessage<::PSCredProof>(Arena*);
template<> ::PSCredRequest* Arena::CreateMaybeMessage<::PSCredRequest>(Arena*);
template<> ::PSCredential* Arena::CreateMaybeMessage<::PSCredential>(Arena*);
template<> ::PSPubKey* Arena::CreateMaybeMessage<::PSPubKey>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class PSPubKey :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PSPubKey) */ {
 public:
  PSPubKey();
  virtual ~PSPubKey();

  PSPubKey(const PSPubKey& from);
  PSPubKey(PSPubKey&& from) noexcept
    : PSPubKey() {
    *this = ::std::move(from);
  }

  inline PSPubKey& operator=(const PSPubKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline PSPubKey& operator=(PSPubKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PSPubKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PSPubKey* internal_default_instance() {
    return reinterpret_cast<const PSPubKey*>(
               &_PSPubKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PSPubKey& a, PSPubKey& b) {
    a.Swap(&b);
  }
  inline void Swap(PSPubKey* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PSPubKey* New() const final {
    return CreateMaybeMessage<PSPubKey>(nullptr);
  }

  PSPubKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PSPubKey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PSPubKey& from);
  void MergeFrom(const PSPubKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PSPubKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PSPubKey";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ps_2eproto);
    return ::descriptor_table_ps_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYiFieldNumber = 2,
    kYYiFieldNumber = 5,
    kGFieldNumber = 1,
    kGgFieldNumber = 3,
    kXXFieldNumber = 4,
  };
  // repeated bytes Yi = 2;
  int yi_size() const;
  private:
  int _internal_yi_size() const;
  public:
  void clear_yi();
  const std::string& yi(int index) const;
  std::string* mutable_yi(int index);
  void set_yi(int index, const std::string& value);
  void set_yi(int index, std::string&& value);
  void set_yi(int index, const char* value);
  void set_yi(int index, const void* value, size_t size);
  std::string* add_yi();
  void add_yi(const std::string& value);
  void add_yi(std::string&& value);
  void add_yi(const char* value);
  void add_yi(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& yi() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_yi();
  private:
  const std::string& _internal_yi(int index) const;
  std::string* _internal_add_yi();
  public:

  // repeated bytes YYi = 5;
  int yyi_size() const;
  private:
  int _internal_yyi_size() const;
  public:
  void clear_yyi();
  const std::string& yyi(int index) const;
  std::string* mutable_yyi(int index);
  void set_yyi(int index, const std::string& value);
  void set_yyi(int index, std::string&& value);
  void set_yyi(int index, const char* value);
  void set_yyi(int index, const void* value, size_t size);
  std::string* add_yyi();
  void add_yyi(const std::string& value);
  void add_yyi(std::string&& value);
  void add_yyi(const char* value);
  void add_yyi(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& yyi() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_yyi();
  private:
  const std::string& _internal_yyi(int index) const;
  std::string* _internal_add_yyi();
  public:

  // bytes g = 1;
  void clear_g();
  const std::string& g() const;
  void set_g(const std::string& value);
  void set_g(std::string&& value);
  void set_g(const char* value);
  void set_g(const void* value, size_t size);
  std::string* mutable_g();
  std::string* release_g();
  void set_allocated_g(std::string* g);
  private:
  const std::string& _internal_g() const;
  void _internal_set_g(const std::string& value);
  std::string* _internal_mutable_g();
  public:

  // bytes gg = 3;
  void clear_gg();
  const std::string& gg() const;
  void set_gg(const std::string& value);
  void set_gg(std::string&& value);
  void set_gg(const char* value);
  void set_gg(const void* value, size_t size);
  std::string* mutable_gg();
  std::string* release_gg();
  void set_allocated_gg(std::string* gg);
  private:
  const std::string& _internal_gg() const;
  void _internal_set_gg(const std::string& value);
  std::string* _internal_mutable_gg();
  public:

  // bytes XX = 4;
  void clear_xx();
  const std::string& xx() const;
  void set_xx(const std::string& value);
  void set_xx(std::string&& value);
  void set_xx(const char* value);
  void set_xx(const void* value, size_t size);
  std::string* mutable_xx();
  std::string* release_xx();
  void set_allocated_xx(std::string* xx);
  private:
  const std::string& _internal_xx() const;
  void _internal_set_xx(const std::string& value);
  std::string* _internal_mutable_xx();
  public:

  // @@protoc_insertion_point(class_scope:PSPubKey)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> yi_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> yyi_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr g_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ps_2eproto;
};
// -------------------------------------------------------------------

class PSCredential :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PSCredential) */ {
 public:
  PSCredential();
  virtual ~PSCredential();

  PSCredential(const PSCredential& from);
  PSCredential(PSCredential&& from) noexcept
    : PSCredential() {
    *this = ::std::move(from);
  }

  inline PSCredential& operator=(const PSCredential& from) {
    CopyFrom(from);
    return *this;
  }
  inline PSCredential& operator=(PSCredential&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PSCredential& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PSCredential* internal_default_instance() {
    return reinterpret_cast<const PSCredential*>(
               &_PSCredential_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PSCredential& a, PSCredential& b) {
    a.Swap(&b);
  }
  inline void Swap(PSCredential* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PSCredential* New() const final {
    return CreateMaybeMessage<PSCredential>(nullptr);
  }

  PSCredential* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PSCredential>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PSCredential& from);
  void MergeFrom(const PSCredential& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PSCredential* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PSCredential";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ps_2eproto);
    return ::descriptor_table_ps_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSig1FieldNumber = 1,
    kSig2FieldNumber = 2,
  };
  // bytes sig1 = 1;
  void clear_sig1();
  const std::string& sig1() const;
  void set_sig1(const std::string& value);
  void set_sig1(std::string&& value);
  void set_sig1(const char* value);
  void set_sig1(const void* value, size_t size);
  std::string* mutable_sig1();
  std::string* release_sig1();
  void set_allocated_sig1(std::string* sig1);
  private:
  const std::string& _internal_sig1() const;
  void _internal_set_sig1(const std::string& value);
  std::string* _internal_mutable_sig1();
  public:

  // bytes sig2 = 2;
  void clear_sig2();
  const std::string& sig2() const;
  void set_sig2(const std::string& value);
  void set_sig2(std::string&& value);
  void set_sig2(const char* value);
  void set_sig2(const void* value, size_t size);
  std::string* mutable_sig2();
  std::string* release_sig2();
  void set_allocated_sig2(std::string* sig2);
  private:
  const std::string& _internal_sig2() const;
  void _internal_set_sig2(const std::string& value);
  std::string* _internal_mutable_sig2();
  public:

  // @@protoc_insertion_point(class_scope:PSCredential)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sig1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sig2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ps_2eproto;
};
// -------------------------------------------------------------------

class PSCredRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PSCredRequest) */ {
 public:
  PSCredRequest();
  virtual ~PSCredRequest();

  PSCredRequest(const PSCredRequest& from);
  PSCredRequest(PSCredRequest&& from) noexcept
    : PSCredRequest() {
    *this = ::std::move(from);
  }

  inline PSCredRequest& operator=(const PSCredRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PSCredRequest& operator=(PSCredRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PSCredRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PSCredRequest* internal_default_instance() {
    return reinterpret_cast<const PSCredRequest*>(
               &_PSCredRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PSCredRequest& a, PSCredRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PSCredRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PSCredRequest* New() const final {
    return CreateMaybeMessage<PSCredRequest>(nullptr);
  }

  PSCredRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PSCredRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PSCredRequest& from);
  void MergeFrom(const PSCredRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PSCredRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PSCredRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ps_2eproto);
    return ::descriptor_table_ps_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCAttributesFieldNumber = 2,
    kVsFieldNumber = 3,
    kRsFieldNumber = 4,
    kAttributesFieldNumber = 5,
    kGtFieldNumber = 1,
  };
  // repeated bytes c_attributes = 2;
  int c_attributes_size() const;
  private:
  int _internal_c_attributes_size() const;
  public:
  void clear_c_attributes();
  const std::string& c_attributes(int index) const;
  std::string* mutable_c_attributes(int index);
  void set_c_attributes(int index, const std::string& value);
  void set_c_attributes(int index, std::string&& value);
  void set_c_attributes(int index, const char* value);
  void set_c_attributes(int index, const void* value, size_t size);
  std::string* add_c_attributes();
  void add_c_attributes(const std::string& value);
  void add_c_attributes(std::string&& value);
  void add_c_attributes(const char* value);
  void add_c_attributes(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& c_attributes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_c_attributes();
  private:
  const std::string& _internal_c_attributes(int index) const;
  std::string* _internal_add_c_attributes();
  public:

  // repeated bytes vs = 3;
  int vs_size() const;
  private:
  int _internal_vs_size() const;
  public:
  void clear_vs();
  const std::string& vs(int index) const;
  std::string* mutable_vs(int index);
  void set_vs(int index, const std::string& value);
  void set_vs(int index, std::string&& value);
  void set_vs(int index, const char* value);
  void set_vs(int index, const void* value, size_t size);
  std::string* add_vs();
  void add_vs(const std::string& value);
  void add_vs(std::string&& value);
  void add_vs(const char* value);
  void add_vs(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& vs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_vs();
  private:
  const std::string& _internal_vs(int index) const;
  std::string* _internal_add_vs();
  public:

  // repeated bytes rs = 4;
  int rs_size() const;
  private:
  int _internal_rs_size() const;
  public:
  void clear_rs();
  const std::string& rs(int index) const;
  std::string* mutable_rs(int index);
  void set_rs(int index, const std::string& value);
  void set_rs(int index, std::string&& value);
  void set_rs(int index, const char* value);
  void set_rs(int index, const void* value, size_t size);
  std::string* add_rs();
  void add_rs(const std::string& value);
  void add_rs(std::string&& value);
  void add_rs(const char* value);
  void add_rs(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& rs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_rs();
  private:
  const std::string& _internal_rs(int index) const;
  std::string* _internal_add_rs();
  public:

  // repeated string attributes = 5;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;
  public:
  void clear_attributes();
  const std::string& attributes(int index) const;
  std::string* mutable_attributes(int index);
  void set_attributes(int index, const std::string& value);
  void set_attributes(int index, std::string&& value);
  void set_attributes(int index, const char* value);
  void set_attributes(int index, const char* value, size_t size);
  std::string* add_attributes();
  void add_attributes(const std::string& value);
  void add_attributes(std::string&& value);
  void add_attributes(const char* value);
  void add_attributes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& attributes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_attributes();
  private:
  const std::string& _internal_attributes(int index) const;
  std::string* _internal_add_attributes();
  public:

  // bytes gt = 1;
  void clear_gt();
  const std::string& gt() const;
  void set_gt(const std::string& value);
  void set_gt(std::string&& value);
  void set_gt(const char* value);
  void set_gt(const void* value, size_t size);
  std::string* mutable_gt();
  std::string* release_gt();
  void set_allocated_gt(std::string* gt);
  private:
  const std::string& _internal_gt() const;
  void _internal_set_gt(const std::string& value);
  std::string* _internal_mutable_gt();
  public:

  // @@protoc_insertion_point(class_scope:PSCredRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> c_attributes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> vs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> rs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> attributes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ps_2eproto;
};
// -------------------------------------------------------------------

class PSCredProof :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PSCredProof) */ {
 public:
  PSCredProof();
  virtual ~PSCredProof();

  PSCredProof(const PSCredProof& from);
  PSCredProof(PSCredProof&& from) noexcept
    : PSCredProof() {
    *this = ::std::move(from);
  }

  inline PSCredProof& operator=(const PSCredProof& from) {
    CopyFrom(from);
    return *this;
  }
  inline PSCredProof& operator=(PSCredProof&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PSCredProof& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PSCredProof* internal_default_instance() {
    return reinterpret_cast<const PSCredProof*>(
               &_PSCredProof_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PSCredProof& a, PSCredProof& b) {
    a.Swap(&b);
  }
  inline void Swap(PSCredProof* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PSCredProof* New() const final {
    return CreateMaybeMessage<PSCredProof>(nullptr);
  }

  PSCredProof* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PSCredProof>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PSCredProof& from);
  void MergeFrom(const PSCredProof& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PSCredProof* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PSCredProof";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ps_2eproto);
    return ::descriptor_table_ps_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAsFieldNumber = 4,
    kVsFieldNumber = 5,
    kRsFieldNumber = 6,
    kAttributesFieldNumber = 7,
    kSig1FieldNumber = 1,
    kSig2FieldNumber = 2,
    kCTFieldNumber = 3,
  };
  // repeated bytes as = 4;
  int as_size() const;
  private:
  int _internal_as_size() const;
  public:
  void clear_as();
  const std::string& as(int index) const;
  std::string* mutable_as(int index);
  void set_as(int index, const std::string& value);
  void set_as(int index, std::string&& value);
  void set_as(int index, const char* value);
  void set_as(int index, const void* value, size_t size);
  std::string* add_as();
  void add_as(const std::string& value);
  void add_as(std::string&& value);
  void add_as(const char* value);
  void add_as(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& as() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_as();
  private:
  const std::string& _internal_as(int index) const;
  std::string* _internal_add_as();
  public:

  // repeated bytes vs = 5;
  int vs_size() const;
  private:
  int _internal_vs_size() const;
  public:
  void clear_vs();
  const std::string& vs(int index) const;
  std::string* mutable_vs(int index);
  void set_vs(int index, const std::string& value);
  void set_vs(int index, std::string&& value);
  void set_vs(int index, const char* value);
  void set_vs(int index, const void* value, size_t size);
  std::string* add_vs();
  void add_vs(const std::string& value);
  void add_vs(std::string&& value);
  void add_vs(const char* value);
  void add_vs(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& vs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_vs();
  private:
  const std::string& _internal_vs(int index) const;
  std::string* _internal_add_vs();
  public:

  // repeated bytes rs = 6;
  int rs_size() const;
  private:
  int _internal_rs_size() const;
  public:
  void clear_rs();
  const std::string& rs(int index) const;
  std::string* mutable_rs(int index);
  void set_rs(int index, const std::string& value);
  void set_rs(int index, std::string&& value);
  void set_rs(int index, const char* value);
  void set_rs(int index, const void* value, size_t size);
  std::string* add_rs();
  void add_rs(const std::string& value);
  void add_rs(std::string&& value);
  void add_rs(const char* value);
  void add_rs(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& rs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_rs();
  private:
  const std::string& _internal_rs(int index) const;
  std::string* _internal_add_rs();
  public:

  // repeated bytes attributes = 7;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;
  public:
  void clear_attributes();
  const std::string& attributes(int index) const;
  std::string* mutable_attributes(int index);
  void set_attributes(int index, const std::string& value);
  void set_attributes(int index, std::string&& value);
  void set_attributes(int index, const char* value);
  void set_attributes(int index, const void* value, size_t size);
  std::string* add_attributes();
  void add_attributes(const std::string& value);
  void add_attributes(std::string&& value);
  void add_attributes(const char* value);
  void add_attributes(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& attributes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_attributes();
  private:
  const std::string& _internal_attributes(int index) const;
  std::string* _internal_add_attributes();
  public:

  // bytes sig1 = 1;
  void clear_sig1();
  const std::string& sig1() const;
  void set_sig1(const std::string& value);
  void set_sig1(std::string&& value);
  void set_sig1(const char* value);
  void set_sig1(const void* value, size_t size);
  std::string* mutable_sig1();
  std::string* release_sig1();
  void set_allocated_sig1(std::string* sig1);
  private:
  const std::string& _internal_sig1() const;
  void _internal_set_sig1(const std::string& value);
  std::string* _internal_mutable_sig1();
  public:

  // bytes sig2 = 2;
  void clear_sig2();
  const std::string& sig2() const;
  void set_sig2(const std::string& value);
  void set_sig2(std::string&& value);
  void set_sig2(const char* value);
  void set_sig2(const void* value, size_t size);
  std::string* mutable_sig2();
  std::string* release_sig2();
  void set_allocated_sig2(std::string* sig2);
  private:
  const std::string& _internal_sig2() const;
  void _internal_set_sig2(const std::string& value);
  std::string* _internal_mutable_sig2();
  public:

  // bytes c_t = 3;
  void clear_c_t();
  const std::string& c_t() const;
  void set_c_t(const std::string& value);
  void set_c_t(std::string&& value);
  void set_c_t(const char* value);
  void set_c_t(const void* value, size_t size);
  std::string* mutable_c_t();
  std::string* release_c_t();
  void set_allocated_c_t(std::string* c_t);
  private:
  const std::string& _internal_c_t() const;
  void _internal_set_c_t(const std::string& value);
  std::string* _internal_mutable_c_t();
  public:

  // @@protoc_insertion_point(class_scope:PSCredProof)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> as_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> vs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> rs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> attributes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sig1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sig2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr c_t_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ps_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PSPubKey

// bytes g = 1;
inline void PSPubKey::clear_g() {
  g_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PSPubKey::g() const {
  // @@protoc_insertion_point(field_get:PSPubKey.g)
  return _internal_g();
}
inline void PSPubKey::set_g(const std::string& value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:PSPubKey.g)
}
inline std::string* PSPubKey::mutable_g() {
  // @@protoc_insertion_point(field_mutable:PSPubKey.g)
  return _internal_mutable_g();
}
inline const std::string& PSPubKey::_internal_g() const {
  return g_.GetNoArena();
}
inline void PSPubKey::_internal_set_g(const std::string& value) {
  
  g_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PSPubKey::set_g(std::string&& value) {
  
  g_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PSPubKey.g)
}
inline void PSPubKey::set_g(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  g_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PSPubKey.g)
}
inline void PSPubKey::set_g(const void* value, size_t size) {
  
  g_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PSPubKey.g)
}
inline std::string* PSPubKey::_internal_mutable_g() {
  
  return g_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PSPubKey::release_g() {
  // @@protoc_insertion_point(field_release:PSPubKey.g)
  
  return g_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PSPubKey::set_allocated_g(std::string* g) {
  if (g != nullptr) {
    
  } else {
    
  }
  g_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), g);
  // @@protoc_insertion_point(field_set_allocated:PSPubKey.g)
}

// repeated bytes Yi = 2;
inline int PSPubKey::_internal_yi_size() const {
  return yi_.size();
}
inline int PSPubKey::yi_size() const {
  return _internal_yi_size();
}
inline void PSPubKey::clear_yi() {
  yi_.Clear();
}
inline std::string* PSPubKey::add_yi() {
  // @@protoc_insertion_point(field_add_mutable:PSPubKey.Yi)
  return _internal_add_yi();
}
inline const std::string& PSPubKey::_internal_yi(int index) const {
  return yi_.Get(index);
}
inline const std::string& PSPubKey::yi(int index) const {
  // @@protoc_insertion_point(field_get:PSPubKey.Yi)
  return _internal_yi(index);
}
inline std::string* PSPubKey::mutable_yi(int index) {
  // @@protoc_insertion_point(field_mutable:PSPubKey.Yi)
  return yi_.Mutable(index);
}
inline void PSPubKey::set_yi(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:PSPubKey.Yi)
  yi_.Mutable(index)->assign(value);
}
inline void PSPubKey::set_yi(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:PSPubKey.Yi)
  yi_.Mutable(index)->assign(std::move(value));
}
inline void PSPubKey::set_yi(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  yi_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PSPubKey.Yi)
}
inline void PSPubKey::set_yi(int index, const void* value, size_t size) {
  yi_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PSPubKey.Yi)
}
inline std::string* PSPubKey::_internal_add_yi() {
  return yi_.Add();
}
inline void PSPubKey::add_yi(const std::string& value) {
  yi_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PSPubKey.Yi)
}
inline void PSPubKey::add_yi(std::string&& value) {
  yi_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:PSPubKey.Yi)
}
inline void PSPubKey::add_yi(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  yi_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PSPubKey.Yi)
}
inline void PSPubKey::add_yi(const void* value, size_t size) {
  yi_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PSPubKey.Yi)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PSPubKey::yi() const {
  // @@protoc_insertion_point(field_list:PSPubKey.Yi)
  return yi_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PSPubKey::mutable_yi() {
  // @@protoc_insertion_point(field_mutable_list:PSPubKey.Yi)
  return &yi_;
}

// bytes gg = 3;
inline void PSPubKey::clear_gg() {
  gg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PSPubKey::gg() const {
  // @@protoc_insertion_point(field_get:PSPubKey.gg)
  return _internal_gg();
}
inline void PSPubKey::set_gg(const std::string& value) {
  _internal_set_gg(value);
  // @@protoc_insertion_point(field_set:PSPubKey.gg)
}
inline std::string* PSPubKey::mutable_gg() {
  // @@protoc_insertion_point(field_mutable:PSPubKey.gg)
  return _internal_mutable_gg();
}
inline const std::string& PSPubKey::_internal_gg() const {
  return gg_.GetNoArena();
}
inline void PSPubKey::_internal_set_gg(const std::string& value) {
  
  gg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PSPubKey::set_gg(std::string&& value) {
  
  gg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PSPubKey.gg)
}
inline void PSPubKey::set_gg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PSPubKey.gg)
}
inline void PSPubKey::set_gg(const void* value, size_t size) {
  
  gg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PSPubKey.gg)
}
inline std::string* PSPubKey::_internal_mutable_gg() {
  
  return gg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PSPubKey::release_gg() {
  // @@protoc_insertion_point(field_release:PSPubKey.gg)
  
  return gg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PSPubKey::set_allocated_gg(std::string* gg) {
  if (gg != nullptr) {
    
  } else {
    
  }
  gg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gg);
  // @@protoc_insertion_point(field_set_allocated:PSPubKey.gg)
}

// bytes XX = 4;
inline void PSPubKey::clear_xx() {
  xx_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PSPubKey::xx() const {
  // @@protoc_insertion_point(field_get:PSPubKey.XX)
  return _internal_xx();
}
inline void PSPubKey::set_xx(const std::string& value) {
  _internal_set_xx(value);
  // @@protoc_insertion_point(field_set:PSPubKey.XX)
}
inline std::string* PSPubKey::mutable_xx() {
  // @@protoc_insertion_point(field_mutable:PSPubKey.XX)
  return _internal_mutable_xx();
}
inline const std::string& PSPubKey::_internal_xx() const {
  return xx_.GetNoArena();
}
inline void PSPubKey::_internal_set_xx(const std::string& value) {
  
  xx_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PSPubKey::set_xx(std::string&& value) {
  
  xx_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PSPubKey.XX)
}
inline void PSPubKey::set_xx(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  xx_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PSPubKey.XX)
}
inline void PSPubKey::set_xx(const void* value, size_t size) {
  
  xx_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PSPubKey.XX)
}
inline std::string* PSPubKey::_internal_mutable_xx() {
  
  return xx_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PSPubKey::release_xx() {
  // @@protoc_insertion_point(field_release:PSPubKey.XX)
  
  return xx_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PSPubKey::set_allocated_xx(std::string* xx) {
  if (xx != nullptr) {
    
  } else {
    
  }
  xx_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xx);
  // @@protoc_insertion_point(field_set_allocated:PSPubKey.XX)
}

// repeated bytes YYi = 5;
inline int PSPubKey::_internal_yyi_size() const {
  return yyi_.size();
}
inline int PSPubKey::yyi_size() const {
  return _internal_yyi_size();
}
inline void PSPubKey::clear_yyi() {
  yyi_.Clear();
}
inline std::string* PSPubKey::add_yyi() {
  // @@protoc_insertion_point(field_add_mutable:PSPubKey.YYi)
  return _internal_add_yyi();
}
inline const std::string& PSPubKey::_internal_yyi(int index) const {
  return yyi_.Get(index);
}
inline const std::string& PSPubKey::yyi(int index) const {
  // @@protoc_insertion_point(field_get:PSPubKey.YYi)
  return _internal_yyi(index);
}
inline std::string* PSPubKey::mutable_yyi(int index) {
  // @@protoc_insertion_point(field_mutable:PSPubKey.YYi)
  return yyi_.Mutable(index);
}
inline void PSPubKey::set_yyi(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:PSPubKey.YYi)
  yyi_.Mutable(index)->assign(value);
}
inline void PSPubKey::set_yyi(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:PSPubKey.YYi)
  yyi_.Mutable(index)->assign(std::move(value));
}
inline void PSPubKey::set_yyi(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  yyi_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PSPubKey.YYi)
}
inline void PSPubKey::set_yyi(int index, const void* value, size_t size) {
  yyi_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PSPubKey.YYi)
}
inline std::string* PSPubKey::_internal_add_yyi() {
  return yyi_.Add();
}
inline void PSPubKey::add_yyi(const std::string& value) {
  yyi_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PSPubKey.YYi)
}
inline void PSPubKey::add_yyi(std::string&& value) {
  yyi_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:PSPubKey.YYi)
}
inline void PSPubKey::add_yyi(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  yyi_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PSPubKey.YYi)
}
inline void PSPubKey::add_yyi(const void* value, size_t size) {
  yyi_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PSPubKey.YYi)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PSPubKey::yyi() const {
  // @@protoc_insertion_point(field_list:PSPubKey.YYi)
  return yyi_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PSPubKey::mutable_yyi() {
  // @@protoc_insertion_point(field_mutable_list:PSPubKey.YYi)
  return &yyi_;
}

// -------------------------------------------------------------------

// PSCredential

// bytes sig1 = 1;
inline void PSCredential::clear_sig1() {
  sig1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PSCredential::sig1() const {
  // @@protoc_insertion_point(field_get:PSCredential.sig1)
  return _internal_sig1();
}
inline void PSCredential::set_sig1(const std::string& value) {
  _internal_set_sig1(value);
  // @@protoc_insertion_point(field_set:PSCredential.sig1)
}
inline std::string* PSCredential::mutable_sig1() {
  // @@protoc_insertion_point(field_mutable:PSCredential.sig1)
  return _internal_mutable_sig1();
}
inline const std::string& PSCredential::_internal_sig1() const {
  return sig1_.GetNoArena();
}
inline void PSCredential::_internal_set_sig1(const std::string& value) {
  
  sig1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PSCredential::set_sig1(std::string&& value) {
  
  sig1_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PSCredential.sig1)
}
inline void PSCredential::set_sig1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sig1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PSCredential.sig1)
}
inline void PSCredential::set_sig1(const void* value, size_t size) {
  
  sig1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PSCredential.sig1)
}
inline std::string* PSCredential::_internal_mutable_sig1() {
  
  return sig1_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PSCredential::release_sig1() {
  // @@protoc_insertion_point(field_release:PSCredential.sig1)
  
  return sig1_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PSCredential::set_allocated_sig1(std::string* sig1) {
  if (sig1 != nullptr) {
    
  } else {
    
  }
  sig1_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sig1);
  // @@protoc_insertion_point(field_set_allocated:PSCredential.sig1)
}

// bytes sig2 = 2;
inline void PSCredential::clear_sig2() {
  sig2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PSCredential::sig2() const {
  // @@protoc_insertion_point(field_get:PSCredential.sig2)
  return _internal_sig2();
}
inline void PSCredential::set_sig2(const std::string& value) {
  _internal_set_sig2(value);
  // @@protoc_insertion_point(field_set:PSCredential.sig2)
}
inline std::string* PSCredential::mutable_sig2() {
  // @@protoc_insertion_point(field_mutable:PSCredential.sig2)
  return _internal_mutable_sig2();
}
inline const std::string& PSCredential::_internal_sig2() const {
  return sig2_.GetNoArena();
}
inline void PSCredential::_internal_set_sig2(const std::string& value) {
  
  sig2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PSCredential::set_sig2(std::string&& value) {
  
  sig2_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PSCredential.sig2)
}
inline void PSCredential::set_sig2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sig2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PSCredential.sig2)
}
inline void PSCredential::set_sig2(const void* value, size_t size) {
  
  sig2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PSCredential.sig2)
}
inline std::string* PSCredential::_internal_mutable_sig2() {
  
  return sig2_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PSCredential::release_sig2() {
  // @@protoc_insertion_point(field_release:PSCredential.sig2)
  
  return sig2_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PSCredential::set_allocated_sig2(std::string* sig2) {
  if (sig2 != nullptr) {
    
  } else {
    
  }
  sig2_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sig2);
  // @@protoc_insertion_point(field_set_allocated:PSCredential.sig2)
}

// -------------------------------------------------------------------

// PSCredRequest

// bytes gt = 1;
inline void PSCredRequest::clear_gt() {
  gt_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PSCredRequest::gt() const {
  // @@protoc_insertion_point(field_get:PSCredRequest.gt)
  return _internal_gt();
}
inline void PSCredRequest::set_gt(const std::string& value) {
  _internal_set_gt(value);
  // @@protoc_insertion_point(field_set:PSCredRequest.gt)
}
inline std::string* PSCredRequest::mutable_gt() {
  // @@protoc_insertion_point(field_mutable:PSCredRequest.gt)
  return _internal_mutable_gt();
}
inline const std::string& PSCredRequest::_internal_gt() const {
  return gt_.GetNoArena();
}
inline void PSCredRequest::_internal_set_gt(const std::string& value) {
  
  gt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PSCredRequest::set_gt(std::string&& value) {
  
  gt_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PSCredRequest.gt)
}
inline void PSCredRequest::set_gt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PSCredRequest.gt)
}
inline void PSCredRequest::set_gt(const void* value, size_t size) {
  
  gt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PSCredRequest.gt)
}
inline std::string* PSCredRequest::_internal_mutable_gt() {
  
  return gt_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PSCredRequest::release_gt() {
  // @@protoc_insertion_point(field_release:PSCredRequest.gt)
  
  return gt_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PSCredRequest::set_allocated_gt(std::string* gt) {
  if (gt != nullptr) {
    
  } else {
    
  }
  gt_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gt);
  // @@protoc_insertion_point(field_set_allocated:PSCredRequest.gt)
}

// repeated bytes c_attributes = 2;
inline int PSCredRequest::_internal_c_attributes_size() const {
  return c_attributes_.size();
}
inline int PSCredRequest::c_attributes_size() const {
  return _internal_c_attributes_size();
}
inline void PSCredRequest::clear_c_attributes() {
  c_attributes_.Clear();
}
inline std::string* PSCredRequest::add_c_attributes() {
  // @@protoc_insertion_point(field_add_mutable:PSCredRequest.c_attributes)
  return _internal_add_c_attributes();
}
inline const std::string& PSCredRequest::_internal_c_attributes(int index) const {
  return c_attributes_.Get(index);
}
inline const std::string& PSCredRequest::c_attributes(int index) const {
  // @@protoc_insertion_point(field_get:PSCredRequest.c_attributes)
  return _internal_c_attributes(index);
}
inline std::string* PSCredRequest::mutable_c_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:PSCredRequest.c_attributes)
  return c_attributes_.Mutable(index);
}
inline void PSCredRequest::set_c_attributes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:PSCredRequest.c_attributes)
  c_attributes_.Mutable(index)->assign(value);
}
inline void PSCredRequest::set_c_attributes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:PSCredRequest.c_attributes)
  c_attributes_.Mutable(index)->assign(std::move(value));
}
inline void PSCredRequest::set_c_attributes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  c_attributes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PSCredRequest.c_attributes)
}
inline void PSCredRequest::set_c_attributes(int index, const void* value, size_t size) {
  c_attributes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PSCredRequest.c_attributes)
}
inline std::string* PSCredRequest::_internal_add_c_attributes() {
  return c_attributes_.Add();
}
inline void PSCredRequest::add_c_attributes(const std::string& value) {
  c_attributes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PSCredRequest.c_attributes)
}
inline void PSCredRequest::add_c_attributes(std::string&& value) {
  c_attributes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:PSCredRequest.c_attributes)
}
inline void PSCredRequest::add_c_attributes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  c_attributes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PSCredRequest.c_attributes)
}
inline void PSCredRequest::add_c_attributes(const void* value, size_t size) {
  c_attributes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PSCredRequest.c_attributes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PSCredRequest::c_attributes() const {
  // @@protoc_insertion_point(field_list:PSCredRequest.c_attributes)
  return c_attributes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PSCredRequest::mutable_c_attributes() {
  // @@protoc_insertion_point(field_mutable_list:PSCredRequest.c_attributes)
  return &c_attributes_;
}

// repeated bytes vs = 3;
inline int PSCredRequest::_internal_vs_size() const {
  return vs_.size();
}
inline int PSCredRequest::vs_size() const {
  return _internal_vs_size();
}
inline void PSCredRequest::clear_vs() {
  vs_.Clear();
}
inline std::string* PSCredRequest::add_vs() {
  // @@protoc_insertion_point(field_add_mutable:PSCredRequest.vs)
  return _internal_add_vs();
}
inline const std::string& PSCredRequest::_internal_vs(int index) const {
  return vs_.Get(index);
}
inline const std::string& PSCredRequest::vs(int index) const {
  // @@protoc_insertion_point(field_get:PSCredRequest.vs)
  return _internal_vs(index);
}
inline std::string* PSCredRequest::mutable_vs(int index) {
  // @@protoc_insertion_point(field_mutable:PSCredRequest.vs)
  return vs_.Mutable(index);
}
inline void PSCredRequest::set_vs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:PSCredRequest.vs)
  vs_.Mutable(index)->assign(value);
}
inline void PSCredRequest::set_vs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:PSCredRequest.vs)
  vs_.Mutable(index)->assign(std::move(value));
}
inline void PSCredRequest::set_vs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  vs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PSCredRequest.vs)
}
inline void PSCredRequest::set_vs(int index, const void* value, size_t size) {
  vs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PSCredRequest.vs)
}
inline std::string* PSCredRequest::_internal_add_vs() {
  return vs_.Add();
}
inline void PSCredRequest::add_vs(const std::string& value) {
  vs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PSCredRequest.vs)
}
inline void PSCredRequest::add_vs(std::string&& value) {
  vs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:PSCredRequest.vs)
}
inline void PSCredRequest::add_vs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  vs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PSCredRequest.vs)
}
inline void PSCredRequest::add_vs(const void* value, size_t size) {
  vs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PSCredRequest.vs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PSCredRequest::vs() const {
  // @@protoc_insertion_point(field_list:PSCredRequest.vs)
  return vs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PSCredRequest::mutable_vs() {
  // @@protoc_insertion_point(field_mutable_list:PSCredRequest.vs)
  return &vs_;
}

// repeated bytes rs = 4;
inline int PSCredRequest::_internal_rs_size() const {
  return rs_.size();
}
inline int PSCredRequest::rs_size() const {
  return _internal_rs_size();
}
inline void PSCredRequest::clear_rs() {
  rs_.Clear();
}
inline std::string* PSCredRequest::add_rs() {
  // @@protoc_insertion_point(field_add_mutable:PSCredRequest.rs)
  return _internal_add_rs();
}
inline const std::string& PSCredRequest::_internal_rs(int index) const {
  return rs_.Get(index);
}
inline const std::string& PSCredRequest::rs(int index) const {
  // @@protoc_insertion_point(field_get:PSCredRequest.rs)
  return _internal_rs(index);
}
inline std::string* PSCredRequest::mutable_rs(int index) {
  // @@protoc_insertion_point(field_mutable:PSCredRequest.rs)
  return rs_.Mutable(index);
}
inline void PSCredRequest::set_rs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:PSCredRequest.rs)
  rs_.Mutable(index)->assign(value);
}
inline void PSCredRequest::set_rs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:PSCredRequest.rs)
  rs_.Mutable(index)->assign(std::move(value));
}
inline void PSCredRequest::set_rs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  rs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PSCredRequest.rs)
}
inline void PSCredRequest::set_rs(int index, const void* value, size_t size) {
  rs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PSCredRequest.rs)
}
inline std::string* PSCredRequest::_internal_add_rs() {
  return rs_.Add();
}
inline void PSCredRequest::add_rs(const std::string& value) {
  rs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PSCredRequest.rs)
}
inline void PSCredRequest::add_rs(std::string&& value) {
  rs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:PSCredRequest.rs)
}
inline void PSCredRequest::add_rs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  rs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PSCredRequest.rs)
}
inline void PSCredRequest::add_rs(const void* value, size_t size) {
  rs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PSCredRequest.rs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PSCredRequest::rs() const {
  // @@protoc_insertion_point(field_list:PSCredRequest.rs)
  return rs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PSCredRequest::mutable_rs() {
  // @@protoc_insertion_point(field_mutable_list:PSCredRequest.rs)
  return &rs_;
}

// repeated string attributes = 5;
inline int PSCredRequest::_internal_attributes_size() const {
  return attributes_.size();
}
inline int PSCredRequest::attributes_size() const {
  return _internal_attributes_size();
}
inline void PSCredRequest::clear_attributes() {
  attributes_.Clear();
}
inline std::string* PSCredRequest::add_attributes() {
  // @@protoc_insertion_point(field_add_mutable:PSCredRequest.attributes)
  return _internal_add_attributes();
}
inline const std::string& PSCredRequest::_internal_attributes(int index) const {
  return attributes_.Get(index);
}
inline const std::string& PSCredRequest::attributes(int index) const {
  // @@protoc_insertion_point(field_get:PSCredRequest.attributes)
  return _internal_attributes(index);
}
inline std::string* PSCredRequest::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:PSCredRequest.attributes)
  return attributes_.Mutable(index);
}
inline void PSCredRequest::set_attributes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:PSCredRequest.attributes)
  attributes_.Mutable(index)->assign(value);
}
inline void PSCredRequest::set_attributes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:PSCredRequest.attributes)
  attributes_.Mutable(index)->assign(std::move(value));
}
inline void PSCredRequest::set_attributes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  attributes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PSCredRequest.attributes)
}
inline void PSCredRequest::set_attributes(int index, const char* value, size_t size) {
  attributes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PSCredRequest.attributes)
}
inline std::string* PSCredRequest::_internal_add_attributes() {
  return attributes_.Add();
}
inline void PSCredRequest::add_attributes(const std::string& value) {
  attributes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PSCredRequest.attributes)
}
inline void PSCredRequest::add_attributes(std::string&& value) {
  attributes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:PSCredRequest.attributes)
}
inline void PSCredRequest::add_attributes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  attributes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PSCredRequest.attributes)
}
inline void PSCredRequest::add_attributes(const char* value, size_t size) {
  attributes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PSCredRequest.attributes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PSCredRequest::attributes() const {
  // @@protoc_insertion_point(field_list:PSCredRequest.attributes)
  return attributes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PSCredRequest::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:PSCredRequest.attributes)
  return &attributes_;
}

// -------------------------------------------------------------------

// PSCredProof

// bytes sig1 = 1;
inline void PSCredProof::clear_sig1() {
  sig1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PSCredProof::sig1() const {
  // @@protoc_insertion_point(field_get:PSCredProof.sig1)
  return _internal_sig1();
}
inline void PSCredProof::set_sig1(const std::string& value) {
  _internal_set_sig1(value);
  // @@protoc_insertion_point(field_set:PSCredProof.sig1)
}
inline std::string* PSCredProof::mutable_sig1() {
  // @@protoc_insertion_point(field_mutable:PSCredProof.sig1)
  return _internal_mutable_sig1();
}
inline const std::string& PSCredProof::_internal_sig1() const {
  return sig1_.GetNoArena();
}
inline void PSCredProof::_internal_set_sig1(const std::string& value) {
  
  sig1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PSCredProof::set_sig1(std::string&& value) {
  
  sig1_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PSCredProof.sig1)
}
inline void PSCredProof::set_sig1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sig1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PSCredProof.sig1)
}
inline void PSCredProof::set_sig1(const void* value, size_t size) {
  
  sig1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PSCredProof.sig1)
}
inline std::string* PSCredProof::_internal_mutable_sig1() {
  
  return sig1_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PSCredProof::release_sig1() {
  // @@protoc_insertion_point(field_release:PSCredProof.sig1)
  
  return sig1_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PSCredProof::set_allocated_sig1(std::string* sig1) {
  if (sig1 != nullptr) {
    
  } else {
    
  }
  sig1_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sig1);
  // @@protoc_insertion_point(field_set_allocated:PSCredProof.sig1)
}

// bytes sig2 = 2;
inline void PSCredProof::clear_sig2() {
  sig2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PSCredProof::sig2() const {
  // @@protoc_insertion_point(field_get:PSCredProof.sig2)
  return _internal_sig2();
}
inline void PSCredProof::set_sig2(const std::string& value) {
  _internal_set_sig2(value);
  // @@protoc_insertion_point(field_set:PSCredProof.sig2)
}
inline std::string* PSCredProof::mutable_sig2() {
  // @@protoc_insertion_point(field_mutable:PSCredProof.sig2)
  return _internal_mutable_sig2();
}
inline const std::string& PSCredProof::_internal_sig2() const {
  return sig2_.GetNoArena();
}
inline void PSCredProof::_internal_set_sig2(const std::string& value) {
  
  sig2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PSCredProof::set_sig2(std::string&& value) {
  
  sig2_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PSCredProof.sig2)
}
inline void PSCredProof::set_sig2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sig2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PSCredProof.sig2)
}
inline void PSCredProof::set_sig2(const void* value, size_t size) {
  
  sig2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PSCredProof.sig2)
}
inline std::string* PSCredProof::_internal_mutable_sig2() {
  
  return sig2_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PSCredProof::release_sig2() {
  // @@protoc_insertion_point(field_release:PSCredProof.sig2)
  
  return sig2_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PSCredProof::set_allocated_sig2(std::string* sig2) {
  if (sig2 != nullptr) {
    
  } else {
    
  }
  sig2_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sig2);
  // @@protoc_insertion_point(field_set_allocated:PSCredProof.sig2)
}

// bytes c_t = 3;
inline void PSCredProof::clear_c_t() {
  c_t_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PSCredProof::c_t() const {
  // @@protoc_insertion_point(field_get:PSCredProof.c_t)
  return _internal_c_t();
}
inline void PSCredProof::set_c_t(const std::string& value) {
  _internal_set_c_t(value);
  // @@protoc_insertion_point(field_set:PSCredProof.c_t)
}
inline std::string* PSCredProof::mutable_c_t() {
  // @@protoc_insertion_point(field_mutable:PSCredProof.c_t)
  return _internal_mutable_c_t();
}
inline const std::string& PSCredProof::_internal_c_t() const {
  return c_t_.GetNoArena();
}
inline void PSCredProof::_internal_set_c_t(const std::string& value) {
  
  c_t_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PSCredProof::set_c_t(std::string&& value) {
  
  c_t_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PSCredProof.c_t)
}
inline void PSCredProof::set_c_t(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  c_t_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PSCredProof.c_t)
}
inline void PSCredProof::set_c_t(const void* value, size_t size) {
  
  c_t_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PSCredProof.c_t)
}
inline std::string* PSCredProof::_internal_mutable_c_t() {
  
  return c_t_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PSCredProof::release_c_t() {
  // @@protoc_insertion_point(field_release:PSCredProof.c_t)
  
  return c_t_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PSCredProof::set_allocated_c_t(std::string* c_t) {
  if (c_t != nullptr) {
    
  } else {
    
  }
  c_t_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), c_t);
  // @@protoc_insertion_point(field_set_allocated:PSCredProof.c_t)
}

// repeated bytes as = 4;
inline int PSCredProof::_internal_as_size() const {
  return as_.size();
}
inline int PSCredProof::as_size() const {
  return _internal_as_size();
}
inline void PSCredProof::clear_as() {
  as_.Clear();
}
inline std::string* PSCredProof::add_as() {
  // @@protoc_insertion_point(field_add_mutable:PSCredProof.as)
  return _internal_add_as();
}
inline const std::string& PSCredProof::_internal_as(int index) const {
  return as_.Get(index);
}
inline const std::string& PSCredProof::as(int index) const {
  // @@protoc_insertion_point(field_get:PSCredProof.as)
  return _internal_as(index);
}
inline std::string* PSCredProof::mutable_as(int index) {
  // @@protoc_insertion_point(field_mutable:PSCredProof.as)
  return as_.Mutable(index);
}
inline void PSCredProof::set_as(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:PSCredProof.as)
  as_.Mutable(index)->assign(value);
}
inline void PSCredProof::set_as(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:PSCredProof.as)
  as_.Mutable(index)->assign(std::move(value));
}
inline void PSCredProof::set_as(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  as_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PSCredProof.as)
}
inline void PSCredProof::set_as(int index, const void* value, size_t size) {
  as_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PSCredProof.as)
}
inline std::string* PSCredProof::_internal_add_as() {
  return as_.Add();
}
inline void PSCredProof::add_as(const std::string& value) {
  as_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PSCredProof.as)
}
inline void PSCredProof::add_as(std::string&& value) {
  as_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:PSCredProof.as)
}
inline void PSCredProof::add_as(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  as_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PSCredProof.as)
}
inline void PSCredProof::add_as(const void* value, size_t size) {
  as_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PSCredProof.as)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PSCredProof::as() const {
  // @@protoc_insertion_point(field_list:PSCredProof.as)
  return as_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PSCredProof::mutable_as() {
  // @@protoc_insertion_point(field_mutable_list:PSCredProof.as)
  return &as_;
}

// repeated bytes vs = 5;
inline int PSCredProof::_internal_vs_size() const {
  return vs_.size();
}
inline int PSCredProof::vs_size() const {
  return _internal_vs_size();
}
inline void PSCredProof::clear_vs() {
  vs_.Clear();
}
inline std::string* PSCredProof::add_vs() {
  // @@protoc_insertion_point(field_add_mutable:PSCredProof.vs)
  return _internal_add_vs();
}
inline const std::string& PSCredProof::_internal_vs(int index) const {
  return vs_.Get(index);
}
inline const std::string& PSCredProof::vs(int index) const {
  // @@protoc_insertion_point(field_get:PSCredProof.vs)
  return _internal_vs(index);
}
inline std::string* PSCredProof::mutable_vs(int index) {
  // @@protoc_insertion_point(field_mutable:PSCredProof.vs)
  return vs_.Mutable(index);
}
inline void PSCredProof::set_vs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:PSCredProof.vs)
  vs_.Mutable(index)->assign(value);
}
inline void PSCredProof::set_vs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:PSCredProof.vs)
  vs_.Mutable(index)->assign(std::move(value));
}
inline void PSCredProof::set_vs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  vs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PSCredProof.vs)
}
inline void PSCredProof::set_vs(int index, const void* value, size_t size) {
  vs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PSCredProof.vs)
}
inline std::string* PSCredProof::_internal_add_vs() {
  return vs_.Add();
}
inline void PSCredProof::add_vs(const std::string& value) {
  vs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PSCredProof.vs)
}
inline void PSCredProof::add_vs(std::string&& value) {
  vs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:PSCredProof.vs)
}
inline void PSCredProof::add_vs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  vs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PSCredProof.vs)
}
inline void PSCredProof::add_vs(const void* value, size_t size) {
  vs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PSCredProof.vs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PSCredProof::vs() const {
  // @@protoc_insertion_point(field_list:PSCredProof.vs)
  return vs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PSCredProof::mutable_vs() {
  // @@protoc_insertion_point(field_mutable_list:PSCredProof.vs)
  return &vs_;
}

// repeated bytes rs = 6;
inline int PSCredProof::_internal_rs_size() const {
  return rs_.size();
}
inline int PSCredProof::rs_size() const {
  return _internal_rs_size();
}
inline void PSCredProof::clear_rs() {
  rs_.Clear();
}
inline std::string* PSCredProof::add_rs() {
  // @@protoc_insertion_point(field_add_mutable:PSCredProof.rs)
  return _internal_add_rs();
}
inline const std::string& PSCredProof::_internal_rs(int index) const {
  return rs_.Get(index);
}
inline const std::string& PSCredProof::rs(int index) const {
  // @@protoc_insertion_point(field_get:PSCredProof.rs)
  return _internal_rs(index);
}
inline std::string* PSCredProof::mutable_rs(int index) {
  // @@protoc_insertion_point(field_mutable:PSCredProof.rs)
  return rs_.Mutable(index);
}
inline void PSCredProof::set_rs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:PSCredProof.rs)
  rs_.Mutable(index)->assign(value);
}
inline void PSCredProof::set_rs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:PSCredProof.rs)
  rs_.Mutable(index)->assign(std::move(value));
}
inline void PSCredProof::set_rs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  rs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PSCredProof.rs)
}
inline void PSCredProof::set_rs(int index, const void* value, size_t size) {
  rs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PSCredProof.rs)
}
inline std::string* PSCredProof::_internal_add_rs() {
  return rs_.Add();
}
inline void PSCredProof::add_rs(const std::string& value) {
  rs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PSCredProof.rs)
}
inline void PSCredProof::add_rs(std::string&& value) {
  rs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:PSCredProof.rs)
}
inline void PSCredProof::add_rs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  rs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PSCredProof.rs)
}
inline void PSCredProof::add_rs(const void* value, size_t size) {
  rs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PSCredProof.rs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PSCredProof::rs() const {
  // @@protoc_insertion_point(field_list:PSCredProof.rs)
  return rs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PSCredProof::mutable_rs() {
  // @@protoc_insertion_point(field_mutable_list:PSCredProof.rs)
  return &rs_;
}

// repeated bytes attributes = 7;
inline int PSCredProof::_internal_attributes_size() const {
  return attributes_.size();
}
inline int PSCredProof::attributes_size() const {
  return _internal_attributes_size();
}
inline void PSCredProof::clear_attributes() {
  attributes_.Clear();
}
inline std::string* PSCredProof::add_attributes() {
  // @@protoc_insertion_point(field_add_mutable:PSCredProof.attributes)
  return _internal_add_attributes();
}
inline const std::string& PSCredProof::_internal_attributes(int index) const {
  return attributes_.Get(index);
}
inline const std::string& PSCredProof::attributes(int index) const {
  // @@protoc_insertion_point(field_get:PSCredProof.attributes)
  return _internal_attributes(index);
}
inline std::string* PSCredProof::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:PSCredProof.attributes)
  return attributes_.Mutable(index);
}
inline void PSCredProof::set_attributes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:PSCredProof.attributes)
  attributes_.Mutable(index)->assign(value);
}
inline void PSCredProof::set_attributes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:PSCredProof.attributes)
  attributes_.Mutable(index)->assign(std::move(value));
}
inline void PSCredProof::set_attributes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  attributes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PSCredProof.attributes)
}
inline void PSCredProof::set_attributes(int index, const void* value, size_t size) {
  attributes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PSCredProof.attributes)
}
inline std::string* PSCredProof::_internal_add_attributes() {
  return attributes_.Add();
}
inline void PSCredProof::add_attributes(const std::string& value) {
  attributes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PSCredProof.attributes)
}
inline void PSCredProof::add_attributes(std::string&& value) {
  attributes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:PSCredProof.attributes)
}
inline void PSCredProof::add_attributes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  attributes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PSCredProof.attributes)
}
inline void PSCredProof::add_attributes(const void* value, size_t size) {
  attributes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PSCredProof.attributes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PSCredProof::attributes() const {
  // @@protoc_insertion_point(field_list:PSCredProof.attributes)
  return attributes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PSCredProof::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:PSCredProof.attributes)
  return &attributes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ps_2eproto
