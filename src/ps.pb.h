// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ps.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ps_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ps_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ps_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ps_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ps_2eproto;
class CredRequest;
class CredRequestDefaultTypeInternal;
extern CredRequestDefaultTypeInternal _CredRequest_default_instance_;
class Credential;
class CredentialDefaultTypeInternal;
extern CredentialDefaultTypeInternal _Credential_default_instance_;
class PubKey;
class PubKeyDefaultTypeInternal;
extern PubKeyDefaultTypeInternal _PubKey_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CredRequest* Arena::CreateMaybeMessage<::CredRequest>(Arena*);
template<> ::Credential* Arena::CreateMaybeMessage<::Credential>(Arena*);
template<> ::PubKey* Arena::CreateMaybeMessage<::PubKey>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class PubKey :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PubKey) */ {
 public:
  PubKey();
  virtual ~PubKey();

  PubKey(const PubKey& from);
  PubKey(PubKey&& from) noexcept
    : PubKey() {
    *this = ::std::move(from);
  }

  inline PubKey& operator=(const PubKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline PubKey& operator=(PubKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PubKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PubKey* internal_default_instance() {
    return reinterpret_cast<const PubKey*>(
               &_PubKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PubKey& a, PubKey& b) {
    a.Swap(&b);
  }
  inline void Swap(PubKey* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PubKey* New() const final {
    return CreateMaybeMessage<PubKey>(nullptr);
  }

  PubKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PubKey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PubKey& from);
  void MergeFrom(const PubKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PubKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PubKey";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ps_2eproto);
    return ::descriptor_table_ps_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYiFieldNumber = 2,
    kYYiFieldNumber = 5,
    kGFieldNumber = 1,
    kGgFieldNumber = 3,
    kXXFieldNumber = 4,
  };
  // repeated bytes Yi = 2;
  int yi_size() const;
  private:
  int _internal_yi_size() const;
  public:
  void clear_yi();
  const std::string& yi(int index) const;
  std::string* mutable_yi(int index);
  void set_yi(int index, const std::string& value);
  void set_yi(int index, std::string&& value);
  void set_yi(int index, const char* value);
  void set_yi(int index, const void* value, size_t size);
  std::string* add_yi();
  void add_yi(const std::string& value);
  void add_yi(std::string&& value);
  void add_yi(const char* value);
  void add_yi(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& yi() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_yi();
  private:
  const std::string& _internal_yi(int index) const;
  std::string* _internal_add_yi();
  public:

  // repeated bytes YYi = 5;
  int yyi_size() const;
  private:
  int _internal_yyi_size() const;
  public:
  void clear_yyi();
  const std::string& yyi(int index) const;
  std::string* mutable_yyi(int index);
  void set_yyi(int index, const std::string& value);
  void set_yyi(int index, std::string&& value);
  void set_yyi(int index, const char* value);
  void set_yyi(int index, const void* value, size_t size);
  std::string* add_yyi();
  void add_yyi(const std::string& value);
  void add_yyi(std::string&& value);
  void add_yyi(const char* value);
  void add_yyi(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& yyi() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_yyi();
  private:
  const std::string& _internal_yyi(int index) const;
  std::string* _internal_add_yyi();
  public:

  // bytes g = 1;
  void clear_g();
  const std::string& g() const;
  void set_g(const std::string& value);
  void set_g(std::string&& value);
  void set_g(const char* value);
  void set_g(const void* value, size_t size);
  std::string* mutable_g();
  std::string* release_g();
  void set_allocated_g(std::string* g);
  private:
  const std::string& _internal_g() const;
  void _internal_set_g(const std::string& value);
  std::string* _internal_mutable_g();
  public:

  // bytes gg = 3;
  void clear_gg();
  const std::string& gg() const;
  void set_gg(const std::string& value);
  void set_gg(std::string&& value);
  void set_gg(const char* value);
  void set_gg(const void* value, size_t size);
  std::string* mutable_gg();
  std::string* release_gg();
  void set_allocated_gg(std::string* gg);
  private:
  const std::string& _internal_gg() const;
  void _internal_set_gg(const std::string& value);
  std::string* _internal_mutable_gg();
  public:

  // bytes XX = 4;
  void clear_xx();
  const std::string& xx() const;
  void set_xx(const std::string& value);
  void set_xx(std::string&& value);
  void set_xx(const char* value);
  void set_xx(const void* value, size_t size);
  std::string* mutable_xx();
  std::string* release_xx();
  void set_allocated_xx(std::string* xx);
  private:
  const std::string& _internal_xx() const;
  void _internal_set_xx(const std::string& value);
  std::string* _internal_mutable_xx();
  public:

  // @@protoc_insertion_point(class_scope:PubKey)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> yi_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> yyi_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr g_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ps_2eproto;
};
// -------------------------------------------------------------------

class Credential :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Credential) */ {
 public:
  Credential();
  virtual ~Credential();

  Credential(const Credential& from);
  Credential(Credential&& from) noexcept
    : Credential() {
    *this = ::std::move(from);
  }

  inline Credential& operator=(const Credential& from) {
    CopyFrom(from);
    return *this;
  }
  inline Credential& operator=(Credential&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Credential& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Credential* internal_default_instance() {
    return reinterpret_cast<const Credential*>(
               &_Credential_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Credential& a, Credential& b) {
    a.Swap(&b);
  }
  inline void Swap(Credential* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Credential* New() const final {
    return CreateMaybeMessage<Credential>(nullptr);
  }

  Credential* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Credential>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Credential& from);
  void MergeFrom(const Credential& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Credential* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Credential";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ps_2eproto);
    return ::descriptor_table_ps_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSig1FieldNumber = 1,
    kSig2FieldNumber = 2,
  };
  // bytes sig1 = 1;
  void clear_sig1();
  const std::string& sig1() const;
  void set_sig1(const std::string& value);
  void set_sig1(std::string&& value);
  void set_sig1(const char* value);
  void set_sig1(const void* value, size_t size);
  std::string* mutable_sig1();
  std::string* release_sig1();
  void set_allocated_sig1(std::string* sig1);
  private:
  const std::string& _internal_sig1() const;
  void _internal_set_sig1(const std::string& value);
  std::string* _internal_mutable_sig1();
  public:

  // bytes sig2 = 2;
  void clear_sig2();
  const std::string& sig2() const;
  void set_sig2(const std::string& value);
  void set_sig2(std::string&& value);
  void set_sig2(const char* value);
  void set_sig2(const void* value, size_t size);
  std::string* mutable_sig2();
  std::string* release_sig2();
  void set_allocated_sig2(std::string* sig2);
  private:
  const std::string& _internal_sig2() const;
  void _internal_set_sig2(const std::string& value);
  std::string* _internal_mutable_sig2();
  public:

  // @@protoc_insertion_point(class_scope:Credential)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sig1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sig2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ps_2eproto;
};
// -------------------------------------------------------------------

class CredRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CredRequest) */ {
 public:
  CredRequest();
  virtual ~CredRequest();

  CredRequest(const CredRequest& from);
  CredRequest(CredRequest&& from) noexcept
    : CredRequest() {
    *this = ::std::move(from);
  }

  inline CredRequest& operator=(const CredRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CredRequest& operator=(CredRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CredRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CredRequest* internal_default_instance() {
    return reinterpret_cast<const CredRequest*>(
               &_CredRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CredRequest& a, CredRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CredRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CredRequest* New() const final {
    return CreateMaybeMessage<CredRequest>(nullptr);
  }

  CredRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CredRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CredRequest& from);
  void MergeFrom(const CredRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CredRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CredRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ps_2eproto);
    return ::descriptor_table_ps_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CredRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ps_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PubKey

// bytes g = 1;
inline void PubKey::clear_g() {
  g_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PubKey::g() const {
  // @@protoc_insertion_point(field_get:PubKey.g)
  return _internal_g();
}
inline void PubKey::set_g(const std::string& value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:PubKey.g)
}
inline std::string* PubKey::mutable_g() {
  // @@protoc_insertion_point(field_mutable:PubKey.g)
  return _internal_mutable_g();
}
inline const std::string& PubKey::_internal_g() const {
  return g_.GetNoArena();
}
inline void PubKey::_internal_set_g(const std::string& value) {
  
  g_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PubKey::set_g(std::string&& value) {
  
  g_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PubKey.g)
}
inline void PubKey::set_g(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  g_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PubKey.g)
}
inline void PubKey::set_g(const void* value, size_t size) {
  
  g_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PubKey.g)
}
inline std::string* PubKey::_internal_mutable_g() {
  
  return g_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PubKey::release_g() {
  // @@protoc_insertion_point(field_release:PubKey.g)
  
  return g_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PubKey::set_allocated_g(std::string* g) {
  if (g != nullptr) {
    
  } else {
    
  }
  g_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), g);
  // @@protoc_insertion_point(field_set_allocated:PubKey.g)
}

// repeated bytes Yi = 2;
inline int PubKey::_internal_yi_size() const {
  return yi_.size();
}
inline int PubKey::yi_size() const {
  return _internal_yi_size();
}
inline void PubKey::clear_yi() {
  yi_.Clear();
}
inline std::string* PubKey::add_yi() {
  // @@protoc_insertion_point(field_add_mutable:PubKey.Yi)
  return _internal_add_yi();
}
inline const std::string& PubKey::_internal_yi(int index) const {
  return yi_.Get(index);
}
inline const std::string& PubKey::yi(int index) const {
  // @@protoc_insertion_point(field_get:PubKey.Yi)
  return _internal_yi(index);
}
inline std::string* PubKey::mutable_yi(int index) {
  // @@protoc_insertion_point(field_mutable:PubKey.Yi)
  return yi_.Mutable(index);
}
inline void PubKey::set_yi(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:PubKey.Yi)
  yi_.Mutable(index)->assign(value);
}
inline void PubKey::set_yi(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:PubKey.Yi)
  yi_.Mutable(index)->assign(std::move(value));
}
inline void PubKey::set_yi(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  yi_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PubKey.Yi)
}
inline void PubKey::set_yi(int index, const void* value, size_t size) {
  yi_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PubKey.Yi)
}
inline std::string* PubKey::_internal_add_yi() {
  return yi_.Add();
}
inline void PubKey::add_yi(const std::string& value) {
  yi_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PubKey.Yi)
}
inline void PubKey::add_yi(std::string&& value) {
  yi_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:PubKey.Yi)
}
inline void PubKey::add_yi(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  yi_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PubKey.Yi)
}
inline void PubKey::add_yi(const void* value, size_t size) {
  yi_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PubKey.Yi)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PubKey::yi() const {
  // @@protoc_insertion_point(field_list:PubKey.Yi)
  return yi_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PubKey::mutable_yi() {
  // @@protoc_insertion_point(field_mutable_list:PubKey.Yi)
  return &yi_;
}

// bytes gg = 3;
inline void PubKey::clear_gg() {
  gg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PubKey::gg() const {
  // @@protoc_insertion_point(field_get:PubKey.gg)
  return _internal_gg();
}
inline void PubKey::set_gg(const std::string& value) {
  _internal_set_gg(value);
  // @@protoc_insertion_point(field_set:PubKey.gg)
}
inline std::string* PubKey::mutable_gg() {
  // @@protoc_insertion_point(field_mutable:PubKey.gg)
  return _internal_mutable_gg();
}
inline const std::string& PubKey::_internal_gg() const {
  return gg_.GetNoArena();
}
inline void PubKey::_internal_set_gg(const std::string& value) {
  
  gg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PubKey::set_gg(std::string&& value) {
  
  gg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PubKey.gg)
}
inline void PubKey::set_gg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PubKey.gg)
}
inline void PubKey::set_gg(const void* value, size_t size) {
  
  gg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PubKey.gg)
}
inline std::string* PubKey::_internal_mutable_gg() {
  
  return gg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PubKey::release_gg() {
  // @@protoc_insertion_point(field_release:PubKey.gg)
  
  return gg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PubKey::set_allocated_gg(std::string* gg) {
  if (gg != nullptr) {
    
  } else {
    
  }
  gg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gg);
  // @@protoc_insertion_point(field_set_allocated:PubKey.gg)
}

// bytes XX = 4;
inline void PubKey::clear_xx() {
  xx_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PubKey::xx() const {
  // @@protoc_insertion_point(field_get:PubKey.XX)
  return _internal_xx();
}
inline void PubKey::set_xx(const std::string& value) {
  _internal_set_xx(value);
  // @@protoc_insertion_point(field_set:PubKey.XX)
}
inline std::string* PubKey::mutable_xx() {
  // @@protoc_insertion_point(field_mutable:PubKey.XX)
  return _internal_mutable_xx();
}
inline const std::string& PubKey::_internal_xx() const {
  return xx_.GetNoArena();
}
inline void PubKey::_internal_set_xx(const std::string& value) {
  
  xx_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PubKey::set_xx(std::string&& value) {
  
  xx_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PubKey.XX)
}
inline void PubKey::set_xx(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  xx_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PubKey.XX)
}
inline void PubKey::set_xx(const void* value, size_t size) {
  
  xx_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PubKey.XX)
}
inline std::string* PubKey::_internal_mutable_xx() {
  
  return xx_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PubKey::release_xx() {
  // @@protoc_insertion_point(field_release:PubKey.XX)
  
  return xx_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PubKey::set_allocated_xx(std::string* xx) {
  if (xx != nullptr) {
    
  } else {
    
  }
  xx_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xx);
  // @@protoc_insertion_point(field_set_allocated:PubKey.XX)
}

// repeated bytes YYi = 5;
inline int PubKey::_internal_yyi_size() const {
  return yyi_.size();
}
inline int PubKey::yyi_size() const {
  return _internal_yyi_size();
}
inline void PubKey::clear_yyi() {
  yyi_.Clear();
}
inline std::string* PubKey::add_yyi() {
  // @@protoc_insertion_point(field_add_mutable:PubKey.YYi)
  return _internal_add_yyi();
}
inline const std::string& PubKey::_internal_yyi(int index) const {
  return yyi_.Get(index);
}
inline const std::string& PubKey::yyi(int index) const {
  // @@protoc_insertion_point(field_get:PubKey.YYi)
  return _internal_yyi(index);
}
inline std::string* PubKey::mutable_yyi(int index) {
  // @@protoc_insertion_point(field_mutable:PubKey.YYi)
  return yyi_.Mutable(index);
}
inline void PubKey::set_yyi(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:PubKey.YYi)
  yyi_.Mutable(index)->assign(value);
}
inline void PubKey::set_yyi(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:PubKey.YYi)
  yyi_.Mutable(index)->assign(std::move(value));
}
inline void PubKey::set_yyi(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  yyi_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PubKey.YYi)
}
inline void PubKey::set_yyi(int index, const void* value, size_t size) {
  yyi_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PubKey.YYi)
}
inline std::string* PubKey::_internal_add_yyi() {
  return yyi_.Add();
}
inline void PubKey::add_yyi(const std::string& value) {
  yyi_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PubKey.YYi)
}
inline void PubKey::add_yyi(std::string&& value) {
  yyi_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:PubKey.YYi)
}
inline void PubKey::add_yyi(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  yyi_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PubKey.YYi)
}
inline void PubKey::add_yyi(const void* value, size_t size) {
  yyi_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PubKey.YYi)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PubKey::yyi() const {
  // @@protoc_insertion_point(field_list:PubKey.YYi)
  return yyi_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PubKey::mutable_yyi() {
  // @@protoc_insertion_point(field_mutable_list:PubKey.YYi)
  return &yyi_;
}

// -------------------------------------------------------------------

// Credential

// bytes sig1 = 1;
inline void Credential::clear_sig1() {
  sig1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Credential::sig1() const {
  // @@protoc_insertion_point(field_get:Credential.sig1)
  return _internal_sig1();
}
inline void Credential::set_sig1(const std::string& value) {
  _internal_set_sig1(value);
  // @@protoc_insertion_point(field_set:Credential.sig1)
}
inline std::string* Credential::mutable_sig1() {
  // @@protoc_insertion_point(field_mutable:Credential.sig1)
  return _internal_mutable_sig1();
}
inline const std::string& Credential::_internal_sig1() const {
  return sig1_.GetNoArena();
}
inline void Credential::_internal_set_sig1(const std::string& value) {
  
  sig1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Credential::set_sig1(std::string&& value) {
  
  sig1_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Credential.sig1)
}
inline void Credential::set_sig1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sig1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Credential.sig1)
}
inline void Credential::set_sig1(const void* value, size_t size) {
  
  sig1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Credential.sig1)
}
inline std::string* Credential::_internal_mutable_sig1() {
  
  return sig1_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Credential::release_sig1() {
  // @@protoc_insertion_point(field_release:Credential.sig1)
  
  return sig1_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Credential::set_allocated_sig1(std::string* sig1) {
  if (sig1 != nullptr) {
    
  } else {
    
  }
  sig1_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sig1);
  // @@protoc_insertion_point(field_set_allocated:Credential.sig1)
}

// bytes sig2 = 2;
inline void Credential::clear_sig2() {
  sig2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Credential::sig2() const {
  // @@protoc_insertion_point(field_get:Credential.sig2)
  return _internal_sig2();
}
inline void Credential::set_sig2(const std::string& value) {
  _internal_set_sig2(value);
  // @@protoc_insertion_point(field_set:Credential.sig2)
}
inline std::string* Credential::mutable_sig2() {
  // @@protoc_insertion_point(field_mutable:Credential.sig2)
  return _internal_mutable_sig2();
}
inline const std::string& Credential::_internal_sig2() const {
  return sig2_.GetNoArena();
}
inline void Credential::_internal_set_sig2(const std::string& value) {
  
  sig2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Credential::set_sig2(std::string&& value) {
  
  sig2_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Credential.sig2)
}
inline void Credential::set_sig2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sig2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Credential.sig2)
}
inline void Credential::set_sig2(const void* value, size_t size) {
  
  sig2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Credential.sig2)
}
inline std::string* Credential::_internal_mutable_sig2() {
  
  return sig2_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Credential::release_sig2() {
  // @@protoc_insertion_point(field_release:Credential.sig2)
  
  return sig2_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Credential::set_allocated_sig2(std::string* sig2) {
  if (sig2 != nullptr) {
    
  } else {
    
  }
  sig2_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sig2);
  // @@protoc_insertion_point(field_set_allocated:Credential.sig2)
}

// -------------------------------------------------------------------

// CredRequest

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ps_2eproto
